<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Naive Bayes Classifier</title>
      <link href="/2019/03/25/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/"/>
      <url>/2019/03/25/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF/</url>
      
        <content type="html"><![CDATA[<p>在机器学习领域中，朴素贝叶斯是一种基于贝叶斯定理的简单概率分类器, 朴素贝叶斯在处理文本数据时可以得到较好的分类结果，被广泛应用于文本分类/垃圾邮件过滤/自然语言处理等场景。</p><a id="more"></a><h2 id="使用Python进行文本分类"><a href="#使用Python进行文本分类" class="headerlink" title="使用Python进行文本分类"></a>使用Python进行文本分类</h2><h3 id="判断某句话是否为正常言论"><a href="#判断某句话是否为正常言论" class="headerlink" title="判断某句话是否为正常言论"></a>判断某句话是否为正常言论</h3><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    postingList = </span><br><span class="line">    [[<span class="string">'my'</span>, <span class="string">'dog'</span>, <span class="string">'has'</span>, <span class="string">'flea'</span>, <span class="string">'problems'</span>, <span class="string">'help'</span>, <span class="string">'please'</span>],</span><br><span class="line">     [<span class="string">'maybe'</span>, <span class="string">'not'</span>, <span class="string">'take'</span>, <span class="string">'him'</span>, <span class="string">'to'</span>, <span class="string">'dog'</span>, <span class="string">'park'</span>, <span class="string">'stupid'</span>],</span><br><span class="line">     [<span class="string">'my'</span>, <span class="string">'dalmation'</span>, <span class="string">'is'</span>, <span class="string">'so'</span>, <span class="string">'cute'</span>, <span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'him'</span>],</span><br><span class="line">     [<span class="string">'stop'</span>, <span class="string">'posting'</span>, <span class="string">'stupid'</span>, <span class="string">'worthless'</span>, <span class="string">'garbage'</span>],</span><br><span class="line">     [<span class="string">'mr'</span>, <span class="string">'licks'</span>, <span class="string">'ate'</span>, <span class="string">'my'</span>, <span class="string">'steak'</span>,<span class="string">'how'</span>, <span class="string">'to'</span>, <span class="string">'stop'</span>, <span class="string">'him'</span>],</span><br><span class="line">     [<span class="string">'quit'</span>, <span class="string">'buying'</span>, <span class="string">'worthless'</span>, <span class="string">'dog'</span>, <span class="string">'food'</span>, <span class="string">'stupid'</span>]]</span><br><span class="line">    classVec = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]  <span class="comment"># 1 侮辱性文字, 0 正常言论</span></span><br><span class="line">    <span class="keyword">return</span> postingList, classVec</span><br></pre></td></tr></table></figure><h4 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createVocabList</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    vocabSet = set([])  <span class="comment"># create empty set</span></span><br><span class="line">    <span class="keyword">for</span> document <span class="keyword">in</span> dataSet:</span><br><span class="line">        vocabSet = vocabSet | set(document)  <span class="comment"># union of the two sets</span></span><br><span class="line">    <span class="keyword">return</span> list(vocabSet)</span><br></pre></td></tr></table></figure><h4 id="将某句话转换为向量"><a href="#将某句话转换为向量" class="headerlink" title="将某句话转换为向量"></a>将某句话转换为向量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setOfWords2Vec</span><span class="params">(vocabList, inputSet)</span>:</span></span><br><span class="line">    returnVec = [<span class="number">0</span>]*len(vocabList)</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> inputSet:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> vocabList:</span><br><span class="line">            returnVec[vocabList.index(word)] = <span class="number">1</span></span><br><span class="line">            <span class="comment">#词集模型 某个单词只能出现一次</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"the word: %s is not in my Vocabulary!"</span> % word)</span><br><span class="line">    <span class="keyword">return</span> returnVec</span><br></pre></td></tr></table></figure><h4 id="从词向量计算概率"><a href="#从词向量计算概率" class="headerlink" title="从词向量计算概率"></a>从词向量计算概率</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainNB0</span><span class="params">(trainMatrix, trainCategory)</span>:</span></span><br><span class="line">    numTrainDocs = len(trainMatrix)</span><br><span class="line">    numWords = len(trainMatrix[<span class="number">0</span>])</span><br><span class="line">    pAbusive = sum(trainCategory)/float(numTrainDocs)</span><br><span class="line">    p0Num = ones(numWords)</span><br><span class="line">    p1Num = ones(numWords)  <span class="comment"># change to ones()</span></span><br><span class="line">    p0Denom = <span class="number">2.0</span></span><br><span class="line">    p1Denom = <span class="number">2.0</span>  <span class="comment"># change to 2.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numTrainDocs):</span><br><span class="line">        <span class="keyword">if</span> trainCategory[i] == <span class="number">1</span>:</span><br><span class="line">            p1Num += trainMatrix[i]</span><br><span class="line">            p1Denom += sum(trainMatrix[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p0Num += trainMatrix[i]</span><br><span class="line">            p0Denom += sum(trainMatrix[i])</span><br><span class="line">    p1Vect = log(p1Num/p1Denom)  <span class="comment"># change to log()</span></span><br><span class="line">    p0Vect = log(p0Num/p0Denom)  <span class="comment"># change to log()</span></span><br><span class="line">    <span class="keyword">return</span> p0Vect, p1Vect, pAbusive</span><br></pre></td></tr></table></figure><p><a href="https://sylvanassun.github.io/2017/12/20/2017-12-20-naive_bayes/" target="_blank" rel="noopener">参考文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> DL </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用</title>
      <link href="/2019/03/15/git%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/03/15/git%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</p><a id="more"></a><h2 id="分支操作相关命令"><a href="#分支操作相关命令" class="headerlink" title="分支操作相关命令"></a>分支操作相关命令</h2><p>1.查看本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>2.查看远程分之</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line">git branch -r</span><br></pre></td></tr></table></figure><p><em>如果你知道,请告诉我区别</em></p><p>3.创建本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch EXAMPLE</span><br></pre></td></tr></table></figure><p>4.切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout EXAMPLE</span><br></pre></td></tr></table></figure><p>5.创建新分支并切换到新分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b EXAMPLE</span><br></pre></td></tr></table></figure><p>6.删除本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d EXAMPLE</span><br></pre></td></tr></table></figure><p><em>我将origin作为了远程仓库的名字</em></p><p>7.创建远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin EXAMPLE</span><br></pre></td></tr></table></figure><p>8.删除远程(origin)分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete EXAMPLE</span><br></pre></td></tr></table></figure><p>9.添加远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 地址</span><br></pre></td></tr></table></figure><p><em>地址可以是HTTPS或者SSH</em></p><p><a href="https://www.cnblogs.com/ydxblog/p/7988317.html" target="_blank" rel="noopener">参考文档</a></p><h2 id="我曾出现的问题"><a href="#我曾出现的问题" class="headerlink" title="我曾出现的问题"></a>我曾出现的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error:src refspec master does not match any</span><br></pre></td></tr></table></figure><p>解决:引起该错误的原因是，目录中没有文件，空目录是不能提交上去的，而且在push之前至少有过一次commit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line">git touch README </span><br><span class="line">git add README </span><br><span class="line">git commit -m &apos;first commit&apos;</span><br><span class="line">git remote add origin 地址</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Note</title>
      <link href="/2019/03/04/%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/04/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>C++    Python    STL    ACM    LeetCode    数据结构</p><a id="more"></a><h2 id="CPP方向"><a href="#CPP方向" class="headerlink" title="CPP方向"></a>CPP方向</h2><ul><li>for循环的这种用法</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> c : nums)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><ul><li>substr()函数返回字符串的某个区间内元素<br>例如str.substr(2,4):从下标为2的元素开始(包括下标为2的元素)往后的四个元素</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">FindQZ</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;str)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; result &lt; str[<span class="number">0</span>].size(); ++result) &#123;</span><br><span class="line">    <span class="keyword">char</span> checker = str[<span class="number">0</span>][result];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.size(); ++i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (checker != str[i][result])</span><br><span class="line">        <span class="keyword">return</span> str[<span class="number">0</span>].substr(<span class="number">0</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str[<span class="number">0</span>].substr(<span class="number">0</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CPP program to illustrate substr() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; str = &#123;<span class="string">"i"</span>, <span class="string">"am"</span>, <span class="string">"lijunkui"</span>&#125;;</span><br><span class="line">    <span class="comment">//区分与vector&lt;char&gt; x=&#123;'i','a','m','l'&#125;;</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; str[<span class="number">2</span>].substr(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">string</span> s = <span class="string">"lijunkui"</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; s.substr(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">string</span> a = s.substr(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line">&gt;&gt;&gt;jun</span><br><span class="line">&gt;&gt;&gt;ij</span><br><span class="line">&gt;&gt;&gt;ij</span><br></pre></td></tr></table></figure><ul><li>accumulate()累加求和函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int sum = accumulate(vec.begin() , vec.end() , 42);  </span><br><span class="line">accumulate带有三个形参：头两个形参指定要累加的元素范围，第三个形参则是累加的初值。</span><br></pre></td></tr></table></figure><ul><li>reverse()函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(digits.begin(), digits.end());</span><br></pre></td></tr></table></figure><ul><li>find()函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器表示方法</span></span><br><span class="line">find（a.begin(),a.end(),value）</span><br><span class="line"><span class="comment">//数组的表示方法</span></span><br><span class="line">find（a,a+length,val）</span><br><span class="line"><span class="comment">//对于string，通过a.find(val)==string::npos判断</span></span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">'l'</span>;</span><br><span class="line">    <span class="keyword">if</span>(str.find(ch)!=<span class="built_in">string</span>::npos)&#123; <span class="comment">//查找单个字符</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str.find(ch)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;<span class="comment">//表示第0个位置开始</span></span><br><span class="line"><span class="keyword">while</span>(str.find(ch, p)!=<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            p = str.find(ch, p);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;p&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            p = p + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>distance()函数返回容器中两个地址之间的距离</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意:这里是闭区间</span></span><br><span class="line"> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; distance(numbers.begin(), numbers.end()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; numbers.end() - numbers.begin() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> 输出:<span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>unique(it_1，it_2)函数,表示对容器中[it_1，it_2)范围的元素进行去重(注：区间是前闭后开，即不包含it_2所指的元素),返回值是一个迭代器，它指向的是去重后容器中不重复序列的最后一个元素的下一个元素。</li></ul><img src="/2019/03/04/笔记/unique.png" title="unique"><ul><li>erase(first,last);删除从first到last之间的字符（first和last都是迭代器）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> dup = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// unique的作用是将容器中相邻元素的重复元素至尾</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = unique(nums.begin(), nums.end());</span><br><span class="line">  dup = it - nums.begin();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"it="</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  nums.erase(it, nums.end()); <span class="comment">//删除  从it位置开始到end结束</span></span><br><span class="line">  <span class="keyword">return</span> dup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这两种方法是针对字符串的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">str</span> <span class="params">(<span class="string">"This is an example phrase."</span>)</span></span>;</span><br><span class="line">  <span class="built_in">string</span>::iterator it;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第(1)种用法</span></span><br><span class="line">  str.erase (<span class="number">10</span>,<span class="number">8</span>);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// "This is an phrase."</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第(2)种用法</span></span><br><span class="line">  it=str.begin()+<span class="number">9</span>;</span><br><span class="line">  str.erase (it);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">// "This is a phrase."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Python方向"><a href="#Python方向" class="headerlink" title="Python方向"></a>Python方向</h2><h3 id="python3-读写Excel"><a href="#python3-读写Excel" class="headerlink" title="python3 读写Excel"></a>python3 读写Excel</h3><ul><li>2007版以前的Excel（xls结尾的），需要使用xlrd读，xlwt写。</li><li>2007版以后的Excel（xlsx结尾的），需要使用openpyxl来读写。</li></ul><p><a href="https://blog.csdn.net/jeikerxiao/article/details/73614335" target="_blank" rel="noopener">参考文档</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reading an excel file using Python </span></span><br><span class="line"><span class="keyword">import</span> xlrd </span><br><span class="line"><span class="comment"># Give the location of the file </span></span><br><span class="line">loc = (<span class="string">"path of file"</span>) </span><br><span class="line"><span class="comment"># To open Workbook </span></span><br><span class="line">wb = xlrd.open_workbook(loc) </span><br><span class="line">sheet = wb.sheet_by_index(<span class="number">0</span>) </span><br><span class="line"><span class="comment"># For row 0 and column 0 </span></span><br><span class="line">sheet.cell_value(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># Extracting number of rows </span></span><br><span class="line">print(sheet.nrows) </span><br><span class="line"><span class="comment"># Extracting number of columns </span></span><br><span class="line">print(sheet.ncols)</span><br><span class="line"><span class="comment">#Extract a particular row or value</span></span><br><span class="line">print(sheet.row_values(<span class="number">1</span>))</span><br><span class="line">print(sheet.col_values(<span class="number">2</span>))</span><br><span class="line"><span class="comment"># For row and column</span></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> range(sheet.nrows):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(sheet.ncols):</span><br><span class="line">        print(sheet.cell_value(r, c))</span><br></pre></td></tr></table></figure><h2 id="ACM"><a href="#ACM" class="headerlink" title="ACM"></a>ACM</h2><p>1.<a href="https://leetcode-cn.com/problems/integer-to-roman/" target="_blank" rel="noopener">整数与罗马数字的转换</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unordered_map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//罗马数字转至整数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; T = &#123;&#123;<span class="string">'I'</span>, <span class="number">1</span>&#125;,   &#123;<span class="string">'V'</span>, <span class="number">5</span>&#125;,   &#123;<span class="string">'X'</span>, <span class="number">10</span>&#125;,  &#123;<span class="string">'L'</span>, <span class="number">50</span>&#125;,</span><br><span class="line">                                &#123;<span class="string">'C'</span>, <span class="number">100</span>&#125;, &#123;<span class="string">'D'</span>, <span class="number">500</span>&#125;, &#123;<span class="string">'M'</span>, <span class="number">1000</span>&#125;&#125;;</span><br><span class="line">  <span class="keyword">int</span> sum = T[s.back()]; <span class="comment">//无向图最后一个元素的值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (T[s[i]] &lt; T[s[i + <span class="number">1</span>]]) <span class="comment">//当左边元素的值小于右边元素的值 必然是相减的关系</span></span><br><span class="line">      sum -= T[s[i]];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sum += T[s[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">  <span class="comment">//整数转至罗马数字</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">InttoRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">char</span> roman[] = &#123;<span class="string">'M'</span>, <span class="string">'D'</span>, <span class="string">'C'</span>, <span class="string">'L'</span>, <span class="string">'X'</span>, <span class="string">'V'</span>, <span class="string">'I'</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> value[] = &#123;<span class="number">1000</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">  <span class="comment">// 7表示最大为4位数,n=+2表示从个位十位百位开始计算</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">7</span>; n += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> x = num / value[n];</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; ++i)</span><br><span class="line">        res += roman[n];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">4</span>)</span><br><span class="line">      res = res + roman[n] + roman[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; <span class="number">4</span> &amp;&amp; x &lt; <span class="number">9</span>) &#123;</span><br><span class="line">      res += roman[n - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">6</span>; i &lt;= x; ++i)</span><br><span class="line">        res += roman[n];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">9</span>)</span><br><span class="line">      res = res + roman[n] + roman[n - <span class="number">2</span>];</span><br><span class="line">    num %= value[n];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> test1 = <span class="string">"MCMXCIV"</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; romanToInt(test1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">int</span> number1 = <span class="number">1994</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; InttoRoman(number1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>整数转至罗马数字解法二</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">InttoRoman2</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; val&#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; str&#123;<span class="string">"M"</span>,  <span class="string">"CM"</span>, <span class="string">"D"</span>,  <span class="string">"CD"</span>, <span class="string">"C"</span>,  <span class="string">"XC"</span>, <span class="string">"L"</span>,</span><br><span class="line">                     <span class="string">"XL"</span>, <span class="string">"X"</span>,  <span class="string">"IX"</span>, <span class="string">"V"</span>,  <span class="string">"IV"</span>, <span class="string">"I"</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; val.size(); ++i) &#123;</span><br><span class="line">    <span class="keyword">while</span> (num &gt;= val[i]) &#123; <span class="comment">//确定num在哪一个阶段</span></span><br><span class="line">      num -= val[i];        <span class="comment">//向下一个较小阶段逼近</span></span><br><span class="line">      res += str[i];        <span class="comment">//叠加相对应的字符</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>此处有问题:vector<int> val向量有什么选择要求?应该怎样选择?为什么要这样选?</int></em></p><p>2.<a href="https://leetcode-cn.com/problems/task-scheduler/" target="_blank" rel="noopener">任务调度器</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"algorithm"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"unordered_map"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"vector"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">leastInterval</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &amp;tasks, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> e : tasks) &#123;</span><br><span class="line">    mp[e]++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span> &lt;&lt; mp[e] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    count = max(count, mp[e]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = (count - <span class="number">1</span>) * (n + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> e : mp)</span><br><span class="line">    <span class="keyword">if</span> (e.second == count)</span><br><span class="line">      ans++;</span><br><span class="line">  <span class="keyword">return</span> max((<span class="keyword">int</span>)tasks.size(), ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; tasks = &#123;<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'C'</span>&#125;;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; leastInterval(tasks, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><a href="https://leetcode-cn.com/problems/triangle/" target="_blank" rel="noopener">三角形最小路径和</a></p><p><em>从底至上，堪称完美</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = triangle.size() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; triangle[i].size(); j++)</span><br><span class="line">triangle[i][j] += min(triangle[i + <span class="number">1</span>][j], triangle[i + <span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li></ol><h2 id="算法列表"><a href="#算法列表" class="headerlink" title="算法列表"></a>算法列表</h2><img src="/2019/03/04/笔记/suanfa.png" title="suanfa"><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><blockquote><p><strong>贪心算法</strong>（英语：greedy algorithm），又称<strong>贪婪算法</strong>，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">算法</a>。</p></blockquote><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><em>Map是STL的一个关联容器，它提供一对一（其中第一个可以称为关键字，每个关键字只能在map中出现一次，第二个可能称为该关键字的值）的数据处理能力。map内部自建一颗红黑树(一 种非严格意义上的平衡二叉树)，这颗树具有对数据自动排序的功能，所以在map内部所有的数据都是有序的</em></p><ol><li>头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>构造函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;TYPE,TYPE&gt; MAPNAME;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; one;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; twe;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; three;</span><br></pre></td></tr></table></figure><h3 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h3><p><em>pair是将2个数据组合成一个数据，当需要这样的需求时就可以使用pair，如stl中的map就是将key和value放在一起来保存。另一个应用是，当一个函数需要返回2个数据的时候，可以选择pair。 pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ program to demonstrate sorting in </span></span><br><span class="line"><span class="comment">// vector of pair according to 1st element of pair </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Declaring vector of pairs </span></span><br><span class="line"><span class="built_in">vector</span>&lt; pair &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; vect; </span><br><span class="line"><span class="comment">// Initializing 1st and 2nd element of </span></span><br><span class="line"><span class="comment">// pairs with array values </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">40</span> &#125;; </span><br><span class="line"><span class="keyword">int</span> arr1[] = &#123;<span class="number">30</span>, <span class="number">60</span>, <span class="number">20</span>, <span class="number">50</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); </span><br><span class="line"><span class="comment">// Entering values in vector of pairs </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line">vect.push_back( make_pair(arr[i],arr1[i]) ); </span><br><span class="line"><span class="comment">// Using simple sort() function to sort </span></span><br><span class="line">sort(vect.begin(), vect.end()); </span><br><span class="line"><span class="comment">// Using sort() function to sort by 2nd element of pair </span></span><br><span class="line">    sort(vect.begin(), vect.end(), sortbysec);</span><br><span class="line"><span class="comment">// Printing the sorted vector(after using sort()) </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line">&#123; </span><br><span class="line"><span class="comment">// "first" and "second" are used to access </span></span><br><span class="line"><span class="comment">// 1st and 2nd element of pair respectively </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i].first &lt;&lt; <span class="string">" "</span></span><br><span class="line">&lt;&lt; vect[i].second &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>构造函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1;  <span class="comment">//使用默认构造函数</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p2(<span class="number">1</span>, <span class="number">2.4</span>);  <span class="comment">//用给定值初始化</span></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p3(p2);  <span class="comment">//拷贝构造函数</span></span><br></pre></td></tr></table></figure><ol start="2"><li>make_pair 函数</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1;</span><br><span class="line">p1 = make_pair(<span class="number">1</span>, <span class="number">1.2</span>);</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p><strong><em>递归算法是一种直接或者间接调用自身函数或者方法的算法。</em></strong></p><p><strong><em>注意:递归内部采用栈的形式</em></strong></p><ol><li><p>案例一:求阶乘</p><img src="/2019/03/04/笔记/jiecheng.png" title="jiecheng"></li><li><p>案例二:汉诺塔问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> A, <span class="keyword">char</span> B, <span class="keyword">char</span> C)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" from "</span> &lt;&lt; A &lt;&lt; <span class="string">" to "</span> &lt;&lt; C &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    Hanoi(n - <span class="number">1</span>, A, C, B);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" from "</span> &lt;&lt; A &lt;&lt; <span class="string">" to "</span> &lt;&lt; C &lt;&lt; <span class="string">", "</span>;</span><br><span class="line">    Hanoi(n - <span class="number">1</span>, B, A, C);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/03/04/笔记/hanoi.png" title="Hanoi"></li></ol><h2 id="On-March-29"><a href="#On-March-29" class="headerlink" title="On March 29"></a>On March 29</h2><h3 id="NLTK-Natural-Language-Toolkit"><a href="#NLTK-Natural-Language-Toolkit" class="headerlink" title="NLTK Natural Language Toolkit"></a>NLTK <strong><em>Natural Language Toolkit</em></strong></h3><h3 id="chatbot工作原理"><a href="#chatbot工作原理" class="headerlink" title="chatbot工作原理"></a>chatbot工作原理</h3><p>提问处理模块、检索模块、答案抽取模块。</p><p>提问处理模块要做三项重要工作：查询关键词生成、答案类型确定、句法和语义分析。</p><p>查询关键词生成，就是从你的提问中提取出关键的几个关键词，因为我本身是一个空壳子，需要去网上查找资料才能回答你，而但网上资料那么多，我该查哪些呢？所以你的提问就有用啦，我找几个中心词，再关联出几个扩展词，上网一搜，一大批资料就来啦，当然这些都是原始资料，我后面要继续处理。再说答案类型确定，这项工作是为了确定你的提问属于哪一类的，如果你问的是时间、地点，和你问的是技术方案，那我后面要做的处理是不一样的。最后再说这个句法和语义分析，这是对你问题的深层含义做一个剖析，比如你的问题是：聊天机器人怎么做？那么我要知道你要问的是聊天机器人的研发方法</p><p>检索模块跟搜索引擎比较像，就是根据查询关键词所信息检索，返回句子或段落，这部分就是下一步要处理的原料</p><p>答案抽取模块可以说是计算量最大的部分了，它要通过分析和推理从检索出的句子或段落里抽取出和提问一致的实体，再根据概率最大对候选答案排序，注意这里是“候选答案”噢，也就是很难给出一个完全正确的结果，很有可能给出多个结果，最后还在再选出一个来</p><h3 id="reload"><a href="#reload" class="headerlink" title="reload()"></a>reload()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.reload(sys)</span><br><span class="line"><span class="comment">#方法二</span></span><br><span class="line"><span class="keyword">from</span> imp <span class="keyword">import</span> reload</span><br><span class="line">imp.reload(<span class="string">'regTrees'</span>)</span><br></pre></td></tr></table></figure><p><strong>命名实体识别</strong>（英语：Named Entity Recognition，简称<strong>NER</strong>），又称作<strong>专名识别</strong>、<strong>命名实体</strong>，是指识别<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E6%9C%AC" target="_blank" rel="noopener">文本</a>中具有特定意义的实体，主要包括人名、地名、机构名、专有名词等，以及时间、数量、货币、比例数值等文字。指的是可以用专有名词（名称）标识的事物，一个命名实体一般代表唯一一个具体事物个体，包括人名、地名等。</p><p>NER属于从非结构化文本中分类和定位命名实体感情的子任务，其过程是从是非结构化文本表达式中产生专有名词标注信息的命名实体表达式，目前NER有两个显著的问题，即识别和分类。例如，“奥巴马是美国总统”的“奥巴马”和“美国”都代表一个具体事物，因此都是命名实体。而“总统”不代表一个具体事物，因此不是命名实体。</p><h3 id="pynlpir-licence-问题或者有以下报错"><a href="#pynlpir-licence-问题或者有以下报错" class="headerlink" title="pynlpir licence 问题或者有以下报错"></a>pynlpir licence 问题或者有以下报错</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeError(<span class="string">"NLPIR function 'NLPIR_Init' failed."</span>)</span><br></pre></td></tr></table></figure><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pynlpir update</span><br></pre></td></tr></table></figure><p><a href="https://pynlpir.readthedocs.io/en/latest/tutorial.html" target="_blank" rel="noopener">pynlpir基本用法</a></p><h4 id="依存句法分析"><a href="#依存句法分析" class="headerlink" title="依存句法分析"></a>依存句法分析</h4><p>依存语法 (Dependency Parsing, DP) 通过分析语言单位内成分之间的依存关系揭示其<code>句法结构</code>。 直观来讲，依存句法分析识别句子中的<code>“主谓宾”、“定状补”</code>这些语法成分，并分析各成分之间的关系。</p><h4 id="语义依存分析"><a href="#语义依存分析" class="headerlink" title="语义依存分析"></a>语义依存分析</h4><p>语义依存分析 (Semantic Dependency Parsing, SDP)，分析句子各个语言单位之间的语义关联，并将语义关联以依存结构呈现。 使用语义依存刻画句子语义，好处在于不需要去抽象词汇本身，而是通过词汇所承受的语义框架来描述该词汇，而论元的数目相对词汇来说数量总是少了很多的。<code>语义依存分析目标是跨越句子表层句法结构的束缚，直接获取深层的语义信息</code>。</p><p><a href="http://www.shareditor.com/blogshow?blogId=77" target="_blank" rel="noopener">参考文档</a></p><p><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">docker介绍</a></p><h4 id="chatterbot"><a href="#chatterbot" class="headerlink" title="chatterbot"></a>chatterbot</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> chatterbot <span class="keyword">import</span> ChatBot</span><br><span class="line">chatbot = ChatBot(<span class="string">"Ron Obvious"</span>)</span><br><span class="line"><span class="keyword">from</span> chatterbot.trainers <span class="keyword">import</span> ListTrainer</span><br><span class="line"></span><br><span class="line">conversation = [</span><br><span class="line">    <span class="string">"Hello"</span>,</span><br><span class="line">    <span class="string">"Hi there!"</span>,</span><br><span class="line">    <span class="string">"How are you doing?"</span>,</span><br><span class="line">    <span class="string">"I'm doing great."</span>,</span><br><span class="line">    <span class="string">"That is good to hear"</span>,</span><br><span class="line">    <span class="string">"Thank you."</span>,</span><br><span class="line">    <span class="string">"You're welcome."</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">chatbot.set_trainer(ListTrainer)</span><br><span class="line">chatbot.train(conversation)</span><br></pre></td></tr></table></figure><p><strong><em>报错信息</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: <span class="string">'ChatBot'</span> object has no attribute <span class="string">'set_trainer'</span></span><br></pre></td></tr></table></figure><p><strong><em>解决办法</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> chatterbot.trainers <span class="keyword">import</span> ListTrainer</span><br><span class="line"></span><br><span class="line">conversation = [</span><br><span class="line">    <span class="string">"Hello"</span>,</span><br><span class="line">    <span class="string">"Hi there!"</span>,</span><br><span class="line">    <span class="string">"How are you doing?"</span>,</span><br><span class="line">    <span class="string">"I'm doing great."</span>,</span><br><span class="line">    <span class="string">"That is good to hear"</span>,</span><br><span class="line">    <span class="string">"Thank you."</span>,</span><br><span class="line">    <span class="string">"You're welcome."</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">trainer = ListTrainer(chatbot)</span><br><span class="line"></span><br><span class="line">trainer.train(conversation)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/gunthercox/ChatterBot/issues/1555" target="_blank" rel="noopener"><a href="https://github.com/gunthercox/ChatterBot/issues/1555" target="_blank" rel="noopener">https://github.com/gunthercox/ChatterBot/issues/1555</a></a></p><p><strong><em>报错信息</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resource averaged_perceptron_tagger not found.</span><br></pre></td></tr></table></figure><p><strong><em>解决办法</em></strong></p><p><a href="https://github.com/vivekkalyanarangan30/Text-Clustering-API/issues/1" target="_blank" rel="noopener"><a href="https://github.com/vivekkalyanarangan30/Text-Clustering-API/issues/1" target="_blank" rel="noopener">https://github.com/vivekkalyanarangan30/Text-Clustering-API/issues/1</a></a></p><h2 id="On-April-2"><a href="#On-April-2" class="headerlink" title="On April 2"></a>On April 2</h2><h3 id="vector-初始化"><a href="#vector-初始化" class="headerlink" title="vector 初始化"></a>vector<int> 初始化</int></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;        <span class="comment">//声明一个int型向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(<span class="number">5</span>);     <span class="comment">//声明一个初始大小为5的int向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(<span class="number">10</span>, <span class="number">1</span>); <span class="comment">//声明一个初始大小为10且值都是1的向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(tmp);   <span class="comment">//声明并用tmp向量初始化vec向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp(vec.begin(), vec.begin() + <span class="number">3</span>);  <span class="comment">//用向量vec的第0个到第2个值初始化tmp</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;   </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(arr, arr + <span class="number">5</span>);      <span class="comment">//将arr数组的元素用于初始化vec向量</span></span><br><span class="line"><span class="comment">//说明：当然不包括arr[4]元素，末尾指针都是指结束元素的下一个元素，</span></span><br><span class="line"><span class="comment">//这个主要是为了和vec.end()指针统一。</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(&amp;arr[<span class="number">1</span>], &amp;arr[<span class="number">4</span>]); <span class="comment">//将arr[1]~arr[4]范围内的元素作为vec的初始值</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/zhonghuasong/p/5975979.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/zhonghuasong/p/5975979.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhonghuasong/p/5975979.html</a></a></p><h2 id="On-April-3"><a href="#On-April-3" class="headerlink" title="On April 3"></a>On April 3</h2><h3 id="深度优先与广度优先"><a href="#深度优先与广度优先" class="headerlink" title="深度优先与广度优先"></a>深度优先与广度优先</h3><p><a href="https://www.cnblogs.com/skywang12345/p/3711483.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/skywang12345/p/3711483.html" target="_blank" rel="noopener">https://www.cnblogs.com/skywang12345/p/3711483.html</a></a></p><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p><strong>树</strong>（英语：tree）是一种<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5" target="_blank" rel="noopener">抽象数据类型</a>（ADT）或是实现这种抽象数据类型的<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B" target="_blank" rel="noopener">数据结构</a>，用来模拟具<a href="https://zh.wikipedia.org/wiki/%E6%A8%B9%E7%8B%80%E7%B5%90%E6%A7%8B" target="_blank" rel="noopener">有树状结构</a>性质的数据集合。它是由n（n&gt;0）个有限节点组成一个具有层次关系的<a href="https://zh.wikipedia.org/wiki/%E9%9B%86%E5%90%88" target="_blank" rel="noopener">集合</a>。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p></blockquote><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>每个节点都只有有限个子节点或无子节点；</li><li>没有父节点的节点称为根节点；</li><li>每一个非根节点有且只有一个父节点；</li><li>除了根节点外，每个子节点可以分为多个不相交的子树；</li><li>树里面没有环路</li></ul><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><ol><li><strong>节点的度</strong>：一个节点含有的子树的个数称为该节点的度；</li><li><strong>树的度</strong>：一棵树中，<strong>最大的节点的度</strong>称为树的度；</li><li><strong>叶节点</strong>或<strong>终端节点</strong>：度为零的节点；</li><li><strong>非终端节点</strong>或<strong>分支节点</strong>：度不为零的节点；</li><li><strong>父亲节点</strong>或<strong>父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点；</li><li><strong>孩子节点</strong>或<strong>子节点</strong>：一个节点含有的子树的根节点称为该节点的子节点；</li><li><strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点；</li><li>节点的<strong>层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</li><li><strong>深度</strong>：对于任意节点n,n的深度为<strong>从根到n的唯一路径长</strong>，根的深度为0；</li><li><strong>高度</strong>：对于任意节点n,n的高度为从<strong>n到一片树叶的最长路径长</strong>，所有树叶的高度为0；</li><li><strong>堂兄弟节点</strong>：父节点在同一层的节点互为堂兄弟；</li><li><strong>节点的祖先</strong>：从根到该节点所经分支上的所有节点；</li><li><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙。</li><li><strong>森林</strong>：由m（m&gt;=0）棵互不相交的树的集合称为森林；</li></ol><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><ul><li>无序树：树中任意节点的子节点之间没有顺序关系，这种树称为无序树，也称为<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E6%A0%91" target="_blank" rel="noopener">自由树</a>；</li><li>有序树：树中任意节点的子节点之间有顺序关系，这种树称为有序树；<ul><li>二叉树：<strong>每个节点最多含有两个子树</strong>的树称为二叉树；<ul><li>完全二叉树：对于一颗二叉树，假设其深度为d（d&gt;1）。除了第d层外，其它各层的节点数目均已达最大值，且第d层所有节点从左向右连续地紧密排列，这样的二叉树被称为完全二叉树；<ul><li><a href="https://zh.wikipedia.org/w/index.php?title=%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">满二叉树</a>：所有叶节点都在最底层的完全二叉树；</li></ul></li><li><a href="https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91" target="_blank" rel="noopener">平衡二叉树</a>（<a href="https://zh.wikipedia.org/wiki/AVL%E6%A0%91" target="_blank" rel="noopener">AVL树</a>）：当且仅当任何节点的两棵子树的高度差不大于1的二叉树；</li><li><a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E4%BA%8C%E5%85%83%E6%A8%B9" target="_blank" rel="noopener">排序二叉树</a>(<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91" target="_blank" rel="noopener">二叉查找树</a>（英语：Binary Search Tree))：也称二叉搜索树、有序二叉树；</li></ul></li><li><a href="https://zh.wikipedia.org/wiki/%E9%9C%8D%E5%A4%AB%E6%9B%BC%E6%A0%91" target="_blank" rel="noopener">霍夫曼树</a>：<a href="https://zh.wikipedia.org/w/index.php?title=%E5%B8%A6%E6%9D%83%E8%B7%AF%E5%BE%84&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">带权路径</a>最短的二叉树称为哈夫曼树或最优二叉树；</li><li><a href="https://zh.wikipedia.org/wiki/B%E6%A0%91" target="_blank" rel="noopener">B树</a>：一种对读写操作进行优化的自平衡的二叉查找树，能够保持数据有序，拥有多于两个子树。</li></ul></li></ul><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><ul><li><p>深度优先遍历</p><ul><li><p><a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86#%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86(Pre-Order_Traversal" target="_blank" rel="noopener">前序遍历(Pre-Order Traversal)</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_order_traversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do Something with root</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">        pre_order_traversal(root-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">        pre_order_traversal(root-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86#%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86(In-Order_Traversal" target="_blank" rel="noopener">中序遍历(In-Order Traversal)</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order_traversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">        in_order_traversal(root-&gt;lchild);</span><br><span class="line">    <span class="comment">// Do Something with root</span></span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">        in_order_traversal(root-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86#%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86(Post-Order_Traversal" target="_blank" rel="noopener">后序遍历(Post-Order Traversal)</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">post_order_traversal</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">        post_order_traversal(root-&gt;lchild);</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">        post_order_traversal(root-&gt;rchild);</span><br><span class="line">    <span class="comment">// Do Something with root</span></span><br></pre></td></tr></table></figure><img src="/2019/03/04/笔记/qianxu.png" title="qianxu"><img src="/2019/03/04/笔记/zhongxu.png" title="zhongxu"><img src="/2019/03/04/笔记/houxu.png" title="houxu"></li></ul><ul><li><p><a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86#%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86" target="_blank" rel="noopener">广度优先遍历</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Layer_Traver</span><span class="params">(tree *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line">    tree *p[SIZE] = &#123;<span class="literal">NULL</span>&#125;;</span><br><span class="line">    tree *tmp;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        p[head] = root;</span><br><span class="line">        tail++;</span><br><span class="line">        <span class="comment">// Do Something with p[head]</span></span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (head &lt; tail) &#123;</span><br><span class="line">        tmp = p[head];</span><br><span class="line">        <span class="comment">// Do Something with p[head]</span></span><br><span class="line">        <span class="keyword">if</span> (tmp-&gt;left != <span class="literal">NULL</span>) &#123; <span class="comment">// left</span></span><br><span class="line">            p[tail] = tmp-&gt;left;</span><br><span class="line">            tail++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmp-&gt;right != <span class="literal">NULL</span>) &#123; <span class="comment">// right</span></span><br><span class="line">            p[tail] = tmp-&gt;right;</span><br><span class="line">            tail++;</span><br><span class="line">        &#125;</span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/03/04/笔记/guangdu.png" title="guangdu"></li></ul><p><em>最简单的划分：是深度优先（先访问子节点，再访问父节点，最后是第二个子节点）？还是广度优先（先访问第一个子节点，再访问第二个子节点，最后访问父节点）？ 深度优先可进一步按照根节点相对于左右子节点的访问先后来划分。如果把左节点和右节点的位置固定不动，那么根节点放在左节点的左边，称为前序（pre-order）、根节点放在左节点和右节点的中间，称为中序（in-order）、根节点放在右节点的右边，称为后序（post-order）。对广度优先而言，遍历没有前序中序后序之分：给定一组已排序的子节点，其“广度优先”的遍历只有一种唯一的结果。</em></p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li><strong>二叉树第i层上的结点数目最多为 2{i-1} (i≥1)</strong></li><li><strong>深度为k的二叉树至多有2{k}-1个结点(k≥1)</strong></li><li><strong>包含n个结点的二叉树的高度至少为log2 (n+1)</strong></li><li><strong>对于任意一个编号为n的节点，如果它有子节点，它的左子节点编号为2n,右节点的编号为2n+1</strong></li></ul><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树的先序输入与输出</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_tree</span><span class="params">(<span class="keyword">char</span>*,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_tree</span><span class="params">(<span class="keyword">char</span>*,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tree[<span class="number">1000</span>];</span><br><span class="line">    get_tree(tree,<span class="number">1</span>);</span><br><span class="line">    print_tree(tree,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_tree</span><span class="params">(<span class="keyword">char</span> *tree,<span class="keyword">int</span> sub)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;t);</span><br><span class="line">    tree[sub]=t;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    get_tree(tree,<span class="number">2</span>*sub);</span><br><span class="line">    get_tree(tree,<span class="number">2</span>*sub+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_tree</span><span class="params">(<span class="keyword">char</span> *tree,<span class="keyword">int</span> sub)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[sub]==<span class="string">'#'</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>,tree[sub]);</span><br><span class="line">    print_tree(tree,<span class="number">2</span>*sub);</span><br><span class="line">    print_tree(tree,<span class="number">2</span>*sub+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p><a href="https://www.cnblogs.com/chenliyang/p/6553128.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenliyang/p/6553128.html</a></p><ol><li><p>节点描述</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    TElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span> </span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure></li><li><p>创建链式二叉树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBitree</span><span class="params">(Bitree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">if</span>((ch=getchar())==<span class="string">'#'</span>)</span><br><span class="line">        T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        T=(Bitnode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bitnode));</span><br><span class="line">        T-&gt;data=ch;</span><br><span class="line">        createBitree(T-&gt;Lchild);</span><br><span class="line">        createBitree(T-&gt;Rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历二叉树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*先序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preTraverse</span><span class="params">(Bitree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,T-&gt;data);</span><br><span class="line">        preTraverse(T-&gt;Lchild);</span><br><span class="line">        preTraverse(T-&gt;Rchild);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*中序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">inorder</span><span class="params">(Bitree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123; </span><br><span class="line">        inorder(T-&gt;Lchild); </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,T-&gt;data);</span><br><span class="line">        inorder(T-&gt;Rchild);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*后序遍历*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">postorder</span><span class="params">(Bitree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       </span><br><span class="line"><span class="keyword">if</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">postorder(T-&gt;lchild);</span><br><span class="line">postorder(T-&gt;rchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,T-&gt;data);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二叉树的深度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>   <span class="title">Depth</span><span class="params">(Bitree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//返回深度</span></span><br><span class="line">    <span class="keyword">int</span> d,dl,dr;</span><br><span class="line">    <span class="keyword">if</span>(!T)</span><br><span class="line">        d=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        dl=Depth(T-&gt;Lchild);</span><br><span class="line">        dr=Depth(T-&gt;Rchild);</span><br><span class="line">        d=<span class="number">1</span>+(dl&gt;dr?dl:dr) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二叉树的层序遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;Bitree&gt; TreeQueue; <span class="comment">//使用队列</span></span><br><span class="line">    TreeQueue.push(tree);   <span class="comment">//先将队头元素加入队列</span></span><br><span class="line">    Bitree p = tree;    </span><br><span class="line">    <span class="keyword">while</span> (!TreeQueue.empty())  <span class="comment">//循环判断队列是否未空，若不空则</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = TreeQueue.front();  <span class="comment">//获取队列头节点，并出队列</span></span><br><span class="line">        TreeQueue.pop();        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %c "</span>, p-&gt;data); <span class="comment">//打印队列元素</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;Lchild)     <span class="comment">//如果该节点有左节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            TreeQueue.push(p-&gt;Lchild);  <span class="comment">//加入队列</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (p-&gt;Rchild)    <span class="comment">//如果该节点有右节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            TreeQueue.push(p-&gt;Rchild); <span class="comment">//加入队列</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="结构体的几种形式"><a href="#结构体的几种形式" class="headerlink" title="结构体的几种形式"></a>结构体的几种形式</h3><p><a href="https://blog.csdn.net/mengxiangjia_linxi/article/details/78168461" target="_blank" rel="noopener">https://blog.csdn.net/mengxiangjia_linxi/article/details/78168461</a></p><ol><li><p>先定义结构体类型，再定义结构体类型变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     <span class="keyword">char</span> name[<span class="number">20</span>];   <span class="comment">//学生姓名</span></span><br><span class="line">     <span class="keyword">char</span> sex;        <span class="comment">//性别</span></span><br><span class="line">     <span class="keyword">long</span> num;        <span class="comment">//学号</span></span><br><span class="line">     <span class="keyword">float</span> score[<span class="number">3</span>];  <span class="comment">//三科考试成绩</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">student1</span>,<span class="title">student2</span>;</span><span class="comment">//struct stu 此时相当于int , char</span></span><br></pre></td></tr></table></figure></li><li><p>定义结构体类型同时定义结构体类型变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">     <span class="keyword">int</span> day;</span><br><span class="line">     <span class="keyword">int</span> month;</span><br><span class="line">     <span class="keyword">int</span> year;</span><br><span class="line">&#125; time1,time2;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> <span class="title">time3</span>,<span class="title">time4</span>;</span><span class="comment">//struct data 此时相当于int , char</span></span><br></pre></td></tr></table></figure></li><li><p><strong>定义一个结构体类型用typedef</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;Stu;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stu stu1;<span class="comment">//Stu 相当于struct Student , 而不能用 Student stu1 这种形式</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CPP方向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
            <tag> ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络</title>
      <link href="/2019/03/03/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/03/03/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>设计一个神经网络时，输入层与输出层的节点数往往是固定的，中间层则可以自由指定；</li><li>神经网络结构图中的拓扑与箭头代表着预测过程时数据的流向，跟训练时的数据流有一定的区别；</li><li>圆圈（代表“神经元”），连接线（代表“神经元”之间的连接）。每个连接线对应一个不同的权重（其值称为权值），这是需要训练得到的。</li></ul><a id="more"></a><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://blog.csdn.net/illikang/article/details/82019945" target="_blank" rel="noopener">https://blog.csdn.net/illikang/article/details/82019945</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树</title>
      <link href="/2019/03/02/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
      <url>/2019/03/02/%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>机器学习中，决策树是一个预测模型；他代表的是对象属性与对象值之间的一种映射关系。树中每个节点表示某个对象，而每个分叉路径则代表某个可能的属性值，而每个叶节点则对应从根节点到该叶节点所经历的路径所表示的对象的值。决策树仅有单一输出，若欲有复数输出，可以建立独立的决策树以处理不同输出。 数据挖掘中决策树是一种经常要用到的技术，可以用于分析数据，同样也可以用来作预测。</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>决策论中 （如风险管理），决策树（Decision tree）由一个决策图和可能的结果（包括资源成本和风险）组成， 用来创建到达目标的规划。决策树建立并用来辅助决策，是一种特殊的树结构。决策树是一个利用像树一样的图形或决策模型的决策支持工具，包括随机事件结果，资源代价和实用性。它是一个算法显示的方法。决策树经常在运筹学中使用，特别是在决策分析中，它帮助确定一个能最可能达到目标的策略。如果在实际中，决策不得不在没有完备知识的情况下被在线采用，一个决策树应该平行概率模型作为最佳的选择模型或在线选择模型算法。决策树的另一个使用是作为计算条件概率的描述性手段。</p><h2 id="信息论"><a href="#信息论" class="headerlink" title="信息论"></a>信息论</h2><p>克劳德·艾尔伍德·香农（Claude Elwood Shannon ，1916年4月30日—2001年2月24日）美国数学家、<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E8%AE%BA/302185?fr=aladdin" target="_blank" rel="noopener">信息论</a>的创始人。</p><img src="/2019/03/02/决策树/xiangnong.png" title="xiangnong"><h3 id="信息量"><a href="#信息量" class="headerlink" title="信息量"></a>信息量</h3><p>信息量在是作为信息“多少”的度量，这里的信息就是你理解的信息，比如一条新闻，考试答案等等。假设我们听到了两件事，分别如下：</p><ul><li>事件A：巴西队进入了2018世界杯决赛圈。</li><li>事件B：中国队进入了2018世界杯决赛圈。</li></ul><p>仅凭直觉来说，事件B的信息量比事件A的信息量要大。究其原因，是因为事件A发生的概率很大，事件B发生的概率很小。所以当越不可能的事件发生了，我们获取到的信息量就越大。越可能发生的事件发生了，我们获取到的信息量就越小。那么：</p><ul><li>信息量和事件发生的概率相关，事件发生的概率越低，传递的信息量越大</li><li>信息量应当是非负的，必然发生的事件的信息量为零（必然事件是必然发生的，所以没有信息量。几乎不可能事件一旦发生，具有近乎无穷大的信息量）</li><li>两个事件的信息量可以相加，并且两个独立事件的联合信息量应该是他们各自信息量的和</li></ul><p>如已知事件Xi已发生，则表示Xi所含有或所提供的信息量：</p><img src="/2019/03/02/决策树/xinxiliang.png" title="xinxi"><p>如果是以2为底数，单位是bit；如果以e为底数，单位是nat；如果以10为底数，单位是det</p><h3 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h3><p>信息熵（Entropy）是接受信息量的平均值，用于确定信息的不确定程度，是随机变量的均值。信息熵越大，信息就越凌乱或传输的信息越多, 信息熵的处理信息是一个让信息的熵减少的过程。</p><p>假设X是一个离散的随机变量，且它的取值范围为{x_1, x_1, …, x_n}，每一种取到的概率分别是 {p_1,p_1,…,p_n}，那么 X 的熵定义为:</p><img src="/2019/03/02/决策树/entropy.png" title="entropy"><h3 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h3><p>信息熵表示的是不确定度。均匀分布时，不确定度最大，此时熵就最大。当选择某个特征对数据集进行分类时，分类后的数据集信息熵会比分类前的小，其差值表示为信息增益。信息增益（Kullback-Leibler divergence）用于度量属性A对降低样本集合X熵的贡献大小。信息增益可以衡量某个特征对分类结果的影响大小。信息增益越大，越适用对X进行分析。</p><h2 id="ID3算法实现"><a href="#ID3算法实现" class="headerlink" title="ID3算法实现"></a>ID3算法实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据集</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createData</span><span class="params">()</span>:</span></span><br><span class="line">    dataSet = [[<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="string">'yes'</span>], [</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, <span class="string">'no'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="string">'no'</span>]]</span><br><span class="line">    labels = [<span class="string">'no surfacing'</span>, <span class="string">'flippers'</span>]</span><br><span class="line">    <span class="keyword">return</span> dataSet, labels</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算信息熵</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcShannonEnt</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    dataSetLen = len(dataSet)</span><br><span class="line">    labelsCount = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> everydata <span class="keyword">in</span> dataSet:</span><br><span class="line">        currentLabel = everydata[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> currentLabel <span class="keyword">not</span> <span class="keyword">in</span> labelsCount.keys():</span><br><span class="line">            labelsCount[currentLabel] = <span class="number">0</span></span><br><span class="line">        labelsCount[currentLabel] += <span class="number">1</span></span><br><span class="line">    ShannonEnt = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> labelsCount:</span><br><span class="line">        prob = float(labelsCount[key])/dataSetLen</span><br><span class="line">        ShannonEnt -= prob*log(prob, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> ShannonEnt</span><br><span class="line"></span><br><span class="line"><span class="comment">#切分数据集</span></span><br><span class="line"><span class="comment">#dataDat表示待划分的数据集,axis表示划分数据集的特征,value表示需要返回的特征的值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spliDataSet</span><span class="params">(dataSet, axis, value)</span>:</span></span><br><span class="line">    retDataSet = []</span><br><span class="line">    <span class="keyword">for</span> featVec <span class="keyword">in</span> dataSet:</span><br><span class="line">        <span class="keyword">if</span> featVec[axis] == value:</span><br><span class="line">            reducedFeatVec = featVec[:axis]</span><br><span class="line">            reducedFeatVec.extend(featVec[axis+<span class="number">1</span>:])</span><br><span class="line">            retDataSet.append(reducedFeatVec)</span><br><span class="line">    <span class="keyword">return</span> retDataSet</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择最佳特征切分数据集</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chooseBestFeatureToSplit</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    numFeatures = len(dataSet[<span class="number">0</span>])<span class="number">-1</span></span><br><span class="line">    baseEntropy = calcShannonEnt(dataSet)</span><br><span class="line">    bestInfoGain = <span class="number">0.0</span></span><br><span class="line">    bestFeature = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numFeatures):</span><br><span class="line">        featList = [example[i] <span class="keyword">for</span> example <span class="keyword">in</span> dataSet]</span><br><span class="line">        uniqueVals = set(featList)</span><br><span class="line">        newEntropy = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> uniqueVals:</span><br><span class="line">            subDataSet = spliDataSet(dataSet, i, value)</span><br><span class="line">            prob = len(subDataSet)/float(len(dataSet))</span><br><span class="line">            newEntropy += prob*calcShannonEnt(subDataSet)</span><br><span class="line">        infoGain = baseEntropy-newEntropy</span><br><span class="line">        <span class="keyword">if</span>(infoGain &gt; bestInfoGain):</span><br><span class="line">            bestInfoGain = infoGain</span><br><span class="line">            bestFeature = i</span><br><span class="line">    <span class="keyword">return</span> bestFeature</span><br></pre></td></tr></table></figure><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python中的for循环</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">9</span>)]:</span><br><span class="line">    print(x,y)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> enumerate([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</span><br><span class="line">    print(x, y)</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line"><span class="number">1.</span>列出<span class="number">1</span>到<span class="number">10</span>的平方列表</span><br><span class="line">L=[]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    L.append(x*x)</span><br><span class="line">print(L)</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"><span class="comment">#python提供了更简便的方法处理这个需求</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">2.</span>添加判断条件</span><br><span class="line"></span><br><span class="line">只取列表中的偶数</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line">[<span class="number">4</span>, <span class="number">16</span>, <span class="number">36</span>, <span class="number">64</span>, <span class="number">100</span>]</span><br><span class="line"><span class="number">3.</span>多个<span class="keyword">for</span>同时判断</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m+n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span><span class="string">'abc'</span>]</span><br><span class="line">[<span class="string">'Aa'</span>, <span class="string">'Ab'</span>, <span class="string">'Ac'</span>, <span class="string">'Ba'</span>, <span class="string">'Bb'</span>, <span class="string">'Bc'</span>, <span class="string">'Ca'</span>, <span class="string">'Cb'</span>, <span class="string">'Cc'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python list 中的冒号</span></span><br><span class="line">[m : ] 代表列表中的第m+<span class="number">1</span>项到最后一项</span><br><span class="line">[ : n] 代表列表中的第一项到第n项</span><br><span class="line"></span><br><span class="line">    m = <span class="number">3</span>  </span><br><span class="line">    n = <span class="number">6</span>  </span><br><span class="line"></span><br><span class="line">    aa = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]  </span><br><span class="line">    a = aa[m : ]  </span><br><span class="line">    b = aa[ : n]  </span><br><span class="line">    c = aa[m : n]  </span><br><span class="line"></span><br><span class="line">    print(a)  </span><br><span class="line">    print(b)  </span><br><span class="line">    print(c)  </span><br><span class="line"></span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">双冒号的情况</span><br><span class="line">list[start:end:step]</span><br><span class="line">start:起始位置 end:结束位置 step:步长</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>range(<span class="number">100</span>)[<span class="number">20</span>:<span class="number">30</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">20</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">28</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#extend()与append()方法的不同</span></span><br><span class="line">&gt;&gt;&gt;a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&gt;&gt;&gt;a.append(b)</span><br><span class="line">&gt;&gt;&gt;a</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">&gt;&gt;&gt;a.extend(b)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/chenmh/p/5750726.html" target="_blank" rel="noopener">参考文档</a></p><h2 id="sklearn决策树可视化"><a href="#sklearn决策树可视化" class="headerlink" title="sklearn决策树可视化"></a>sklearn决策树可视化</h2><blockquote><p>scikit-learn 中决策树的可视化需要安装 graphviz</p></blockquote><p>请不要使用这种方式否则会有报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install graphviz</span><br></pre></td></tr></table></figure><p>正确方式请到<a href="https://www.graphviz.org/" target="_blank" rel="noopener">graphviz</a>下载对应版本并解压包运行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>关于源代码编译安装程序的流程</p><img src="/2019/03/02/决策树/source.png" title="source"><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><h3 id="export-graphviz-将树导出为-Graphviz-格式"><a href="#export-graphviz-将树导出为-Graphviz-格式" class="headerlink" title="export_graphviz 将树导出为 Graphviz 格式"></a>export_graphviz 将树导出为 Graphviz 格式</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris </span><br><span class="line"><span class="comment">#载入sklearn中自带的数据Iris，构造决策树</span></span><br><span class="line">iris=load_iris()</span><br><span class="line">clf=tree.DecisionTreeClassifier()</span><br><span class="line">clf=clf.fit(iris.data,iris.target)</span><br><span class="line"><span class="comment">#训练完成后，我们可以用 export_graphviz 将树导出为 Graphviz 格式</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"iris.dot"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = tree.export_graphviz(clf, out_file=f)</span><br></pre></td></tr></table></figure><p>此时已经在本地生成了 <code>iris.dot</code> 文件，在命令行输入 <code>dot -Tpdf iris.dot -o iris.pdf</code> 生成决策树的PDF可视化文件，打开 iris.pdf就能够看到生成的图片</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><h3 id="使用-pydotplus-直接生成-iris-pdf"><a href="#使用-pydotplus-直接生成-iris-pdf" class="headerlink" title="使用 pydotplus 直接生成 iris.pdf"></a>使用 pydotplus 直接生成 iris.pdf</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pydotplus</span><br><span class="line">dot_data=tree.export_graphviz(clf,out_file=<span class="literal">None</span>)</span><br><span class="line">graph=pydotplus.graph_from_dot_data(dot_data)</span><br><span class="line">graph.write_pdf(<span class="string">'iris_2.pdf'</span>)</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><blockquote><h3 id="使用-pydotplus-直接生成-iris-pdf-1"><a href="#使用-pydotplus-直接生成-iris-pdf-1" class="headerlink" title="使用 pydotplus 直接生成 iris.pdf"></a>使用 pydotplus 直接生成 iris.pdf</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image  </span><br><span class="line">dot_data = tree.export_graphviz(clf, out_file=<span class="literal">None</span>, </span><br><span class="line">                         feature_names=iris.feature_names,  </span><br><span class="line">                         class_names=iris.target_names,  </span><br><span class="line">                         filled=<span class="literal">True</span>, rounded=<span class="literal">True</span>,  </span><br><span class="line">                         special_characters=<span class="literal">True</span>)  </span><br><span class="line">graph = pydotplus.graph_from_dot_data(dot_data)  </span><br><span class="line">Image(graph.create_png())  </span><br><span class="line">dot_data = tree.export_graphviz(clf, out_file=<span class="literal">None</span>,filled=<span class="literal">True</span>)  </span><br><span class="line">graph = pydotplus.graph_from_dot_data(dot_data)  </span><br><span class="line">Image(graph.create_png())</span><br></pre></td></tr></table></figure><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="http://ywtail.github.io/2017/06/08/sklearn%E5%86%B3%E7%AD%96%E6%A0%91%E5%8F%AF%E8%A7%86%E5%8C%96/" target="_blank" rel="noopener">ywtail`s blog</a></p><p><a href="https://ywtail.github.io/python/%E5%8F%AF%E8%A7%86%E5%8C%96/2_sklearn%E5%86%B3%E7%AD%96%E6%A0%91%E5%8F%AF%E8%A7%86%E5%8C%96.html" target="_blank" rel="noopener">sklearn决策树可视化</a></p><h2 id="One-Hot-Encoding"><a href="#One-Hot-Encoding" class="headerlink" title="One-Hot Encoding"></a>One-Hot Encoding</h2><h3 id="相关链接-1"><a href="#相关链接-1" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://blog.csdn.net/pipisorry/article/details/61193868" target="_blank" rel="noopener"><a href="https://blog.csdn.net/pipisorry/article/details/61193868" target="_blank" rel="noopener">https://blog.csdn.net/pipisorry/article/details/61193868</a></a></p><p><a href="https://www.cnblogs.com/wxshi/p/8645600.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/wxshi/p/8645600.html" target="_blank" rel="noopener">https://www.cnblogs.com/wxshi/p/8645600.html</a></a></p><blockquote><p><strong>one hot编码是将类别变量转换为机器学习算法易于利用的一种形式的过程。</strong></p></blockquote><p>one-hot编码是N位状态寄存器为N个状态进行编码的方式</p><p>使用one-hot编码，将离散特征的取值扩展到了欧式空间，离散特征的某个取值就对应欧式空间的某个点。特征之间距离的计算或相似度的计算是非常重要的，而我们常用的距离或相似度的计算都是在欧式空间的相似度计算</p><h2 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h2><p><a href="https://segmentfault.com/a/1190000010300976" target="_blank" rel="noopener"><a href="https://segmentfault.com/a/1190000010300976" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010300976</a></a></p><h2 id="相关链接-2"><a href="#相关链接-2" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.biaodianfu.com/decision-tree.html" target="_blank" rel="noopener">https://www.biaodianfu.com/decision-tree.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> DL </tag>
            
            <tag> ALG </tag>
            
            <tag> sklearn </tag>
            
            <tag> One-Hot </tag>
            
            <tag> ID3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-近邻算法</title>
      <link href="/2019/02/16/KNN/"/>
      <url>/2019/02/16/KNN/</url>
      
        <content type="html"><![CDATA[<p>最近邻居法（KNN算法，又译K-近邻算法）是一种用于分类和回归的非参数统计方法</p><a id="more"></a><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    group = np.array([[<span class="number">1.0</span>, <span class="number">1.1</span>], [<span class="number">1.0</span>, <span class="number">1.0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0.1</span>]])</span><br><span class="line">    labels = [<span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'B'</span>]</span><br><span class="line">    <span class="keyword">return</span> group, labels</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(inX, dataSet, labels, k)</span>:</span></span><br><span class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    diffMat = np.tile(inX, (dataSetSize, <span class="number">1</span>))-dataSet</span><br><span class="line">    sqDiffMat = diffMat**<span class="number">2</span></span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</span><br><span class="line">    distances = sqDistances**<span class="number">0.5</span></span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class="line">        classCount[voteIlabel] = classCount.get(voteIlabel, <span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">    sortedClassCount = sorted(classCount,</span><br><span class="line">                              key=<span class="keyword">lambda</span> x: classCount[x], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><!--more--><h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># python中自带的sum对一维数组的求和</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">print(sum(a))  <span class="comment"># 6</span></span><br><span class="line">sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]])</span><br><span class="line">print(sum(a))  <span class="comment"># [5,7,8]</span></span><br><span class="line"><span class="comment"># shape[]函数返回数组某个维度的长度</span></span><br><span class="line">b = a.shape</span><br><span class="line">c = a.shape[<span class="number">0</span>]</span><br><span class="line">e = a.shape[<span class="number">1</span>]</span><br><span class="line">print(b, c, e)  <span class="comment"># (2,3) 2 3</span></span><br><span class="line">a = np.sum([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]])  <span class="comment"># 无参</span></span><br><span class="line">print(a)  <span class="comment"># 20</span></span><br><span class="line">a = np.sum([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]], axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># axis=0,表示第一个维度,即按列相加</span></span><br><span class="line">print(a)  <span class="comment"># [5,7,8]</span></span><br><span class="line">a = np.sum([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]], axis=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># axis=1,表示第二个维度,即按行相加</span></span><br><span class="line">print(a)  <span class="comment"># [6,14]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dict.get(key, default=None)</span></span><br><span class="line"><span class="comment"># 1. 先定义字典</span></span><br><span class="line">dict = &#123;<span class="string">'A'</span>: <span class="number">1</span>, <span class="string">'B'</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># 2. 当key值存在于dict.keys()中时，调用get()方法，返回的是对应的value值</span></span><br><span class="line">print(dict.get(<span class="string">'A'</span>))</span><br><span class="line"><span class="comment"># 返回为：1</span></span><br><span class="line"><span class="comment"># 3. 当key值不存在于dict.keys()中时，调用get()方法，返回的是None</span></span><br><span class="line">print(dict.get(<span class="string">'C'</span>))</span><br><span class="line"><span class="comment"># 返回为：None</span></span><br><span class="line"><span class="comment"># 4. 当default = x时，若key值存在于dict.keys()时，返回dict[key]；若不存在于dict.keys()中时，返回x</span></span><br><span class="line">print(dict.get(<span class="string">'A'</span>, <span class="number">0</span>))  <span class="comment"># 1</span></span><br><span class="line">print(dict.get(<span class="string">'C'</span>, <span class="number">0</span>))  <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">-1</span>, <span class="number">6</span>, <span class="number">9</span>])</span><br><span class="line">x.argsort()</span><br><span class="line"><span class="comment"># 输出定义为y=array([3,0,2,1,4,5])。</span></span><br><span class="line"><span class="comment"># 我们发现argsort()函数是将x中的元素从小到大排列，提取其对应的index(索引)，然后输出到y。</span></span><br><span class="line"><span class="comment"># 例如：x[3] = -1最小，所以y[0] = 3, x[5] = 9最大，所以y[5] = 5。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sorted函数:sorted(iterable,key,reverse)</span></span><br><span class="line"><span class="comment">#其中iterable表示可以迭代的对象,  </span></span><br><span class="line"><span class="comment">#key是一个函数，用来选取参与比较的元素，</span></span><br><span class="line"><span class="comment">#reverse则是用来指定排序是倒序还是顺序，</span></span><br><span class="line"><span class="comment">#reverse=true则是倒序，reverse=false时则是顺序，默认时reverse=false</span></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line">&gt;&gt;&gt;sorted(d.keys())</span><br><span class="line">[<span class="string">'Bob'</span>, <span class="string">'Michael'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line">&gt;&gt;&gt;sorted(d.values())</span><br><span class="line">[<span class="number">75</span>, <span class="number">85</span>, <span class="number">95</span>]</span><br><span class="line">&gt;&gt;&gt;sorted(d)</span><br><span class="line">[<span class="string">'Bob'</span>, <span class="string">'Michael'</span>, <span class="string">'Tracy'</span>]<span class="comment">#默认就是根据key值排序</span></span><br><span class="line">&gt;&gt;&gt;sorted(d,key=<span class="keyword">lambda</span> x: d[x])<span class="comment">#根据value值的大小对key排序</span></span><br><span class="line">[<span class="string">'Bob'</span>, <span class="string">'Tracy'</span>, <span class="string">'Michael'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下返回值是既包含key又包含value的列表,</span></span><br><span class="line"><span class="comment">#与上面的区别就是sorted的第一个参数不是d而是d.items(),d.items会把d变成一个可迭代对象.</span></span><br><span class="line">d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line">&gt;&gt;&gt;d.items()</span><br><span class="line">dict_items([(<span class="string">'Michael'</span>, <span class="number">95</span>), (<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Tracy'</span>, <span class="number">85</span>)])</span><br><span class="line">&gt;&gt;&gt;sorted(d.items(),key=<span class="keyword">lambda</span> x : x[<span class="number">1</span>])</span><br><span class="line">[(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Tracy'</span>, <span class="number">85</span>), (<span class="string">'Michael'</span>, <span class="number">95</span>)]</span><br><span class="line">&gt;&gt;&gt;d = &#123;<span class="string">'data1'</span>:<span class="number">3</span>,<span class="string">'da'</span>:<span class="number">1</span>,<span class="string">'dat'</span>:<span class="number">2</span>,<span class="string">'data22'</span>:<span class="number">4</span>,<span class="string">'aa'</span>:<span class="number">3</span>,<span class="string">'ff'</span>:<span class="number">0</span>&#125;</span><br><span class="line">&gt;&gt;&gt;sorted(d.items(),key=<span class="keyword">lambda</span> x :(x[<span class="number">1</span>],x[<span class="number">0</span>]))<span class="comment">#对dict先根据value排序,value相等的根据key排序</span></span><br><span class="line">[(<span class="string">'ff'</span>, <span class="number">0</span>), (<span class="string">'da'</span>, <span class="number">1</span>), (<span class="string">'dat'</span>, <span class="number">2</span>), (<span class="string">'aa'</span>, <span class="number">3</span>), (<span class="string">'data1'</span>, <span class="number">3</span>), (<span class="string">'data22'</span>, <span class="number">4</span>)]</span><br><span class="line">sorted(d.items())<span class="comment">#根据key值对整个dict排序</span></span><br><span class="line">[(<span class="string">'aa'</span>, <span class="number">3</span>), (<span class="string">'da'</span>, <span class="number">1</span>), (<span class="string">'dat'</span>, <span class="number">2</span>), (<span class="string">'data1'</span>, <span class="number">3</span>), (<span class="string">'data22'</span>, <span class="number">4</span>), (<span class="string">'ff'</span>, <span class="number">0</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lambda 表达式，</span></span><br><span class="line"><span class="comment">#通常是在需要一个函数，但是又不想费神去命名一个函数的场合下使用，也就是指匿名函数。</span></span><br><span class="line">add = <span class="keyword">lambda</span> x,y : x + y</span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>1.from numpy import * 遇到警告</p><p>2.算法实现的第69行 sorted()</p><p>以下代码报错:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sortedClassCount=sorted(classCount,key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> DL </tag>
            
            <tag> ALG </tag>
            
            <tag> KNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化算法与逻辑回归</title>
      <link href="/2019/02/03/Logistic%E5%9B%9E%E5%BD%92/"/>
      <url>/2019/02/03/Logistic%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>1.线性回归与逻辑回归<br>2.多元梯度下降<br>3.梯度上升<br>4.正规方程<br>5.Logistic regression</p><a id="more"></a><h2 id="线性回归与逻辑回归"><a href="#线性回归与逻辑回归" class="headerlink" title="线性回归与逻辑回归"></a>线性回归与逻辑回归</h2><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><p>在统计学中，线性回归(Linear Regression)是利用称为线性回归方程的最小平方函数对一个或多个自变量和因变量之间关系进行建模的一种回归分析。这种函数是一个或多个称为回归系数的模型参数的线性组合。只有一个自变量的情况称为简单回归,大于一个自变量情况的叫做多元回归。</p><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p>以胃癌病情分析为例，选择两组人群，一组是胃癌组，一组是非胃癌组，两组人群必定具有不同的体征与生活方式等。因此因变量就为是否胃癌，值为“是”或“否”，自变量就可以包括很多了，如年龄、性别、饮食习惯、幽门螺杆菌感染等。</p><h4 id="预测房价"><a href="#预测房价" class="headerlink" title="预测房价"></a>预测房价</h4><img src="/2019/02/03/Logistic回归/fangjia.png" title="fangji"><h2 id="多元梯度下降"><a href="#多元梯度下降" class="headerlink" title="多元梯度下降"></a>多元梯度下降</h2><h4 id="假设函数"><a href="#假设函数" class="headerlink" title="假设函数"></a>假设函数</h4><img src="/2019/02/03/Logistic回归/hx.png" title="h"><p>这里n=5,含有5个参数</p><p>这里需要注意的是，在原有自变量的基础上，需要主观添加一个均为1的偏移量，即公式中的x0。</p><p>假如有两个特征值,即3个参数将会得到如图所示的损失函数</p><img src="/2019/02/03/Logistic回归/1and0.png" title="a"><h4 id="损失函数-代价函数"><a href="#损失函数-代价函数" class="headerlink" title="损失函数(代价函数)"></a>损失函数(代价函数)</h4><img src="/2019/02/03/Logistic回归/cost.png" title="cos"><p>m:样本数</p><h4 id="表示每个theta"><a href="#表示每个theta" class="headerlink" title="表示每个theta"></a>表示每个theta</h4><img src="/2019/02/03/Logistic回归/canshu.png" title="cansh"><img src="/2019/02/03/Logistic回归/loop.png" title="theta"><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> genfromtxt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    m, n = np.shape(dataSet)</span><br><span class="line">    trainData = np.ones((m, n))</span><br><span class="line">    trainData[:, :<span class="number">-1</span>] = dataSet[:, :<span class="number">-1</span>]</span><br><span class="line">    trainLabel = dataSet[:, <span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> trainData, trainLabel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batchGradientDescent</span><span class="params">(x, y, theta, alpha, m, maxIterations)</span>:</span></span><br><span class="line">    xTrains = x.transpose()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, maxIterations):</span><br><span class="line">        hypothesis = np.dot(x, theta)</span><br><span class="line">        loss = hypothesis - y</span><br><span class="line">        <span class="comment"># print loss</span></span><br><span class="line">        gradient = np.dot(xTrains, loss) / m</span><br><span class="line">        theta = theta - alpha * gradient</span><br><span class="line">    <span class="keyword">return</span> theta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(x, theta)</span>:</span></span><br><span class="line">    m, n = np.shape(x)</span><br><span class="line">    xTest = np.ones((m, n+<span class="number">1</span>))</span><br><span class="line">    xTest[:, :, :, :<span class="number">-1</span>] = x</span><br><span class="line">    yP = np.dot(xTest, theta)</span><br><span class="line">    <span class="keyword">return</span> yP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dataPath = <span class="string">r"data.csv"</span></span><br><span class="line">dataSet = genfromtxt(dataPath, delimiter=<span class="string">','</span>)</span><br><span class="line">trainData, trainLabel = getData(dataSet)</span><br><span class="line">m, n = np.shape(trainData)</span><br><span class="line">theta = np.ones(n)</span><br><span class="line">alpha = <span class="number">0.1</span></span><br><span class="line">maxIteration = <span class="number">5000</span></span><br><span class="line">theta = batchGradientDescent(</span><br><span class="line">    trainData, trainLabel, theta, alpha, m, maxIteration)</span><br></pre></td></tr></table></figure><h2 id="梯度上升"><a href="#梯度上升" class="headerlink" title="梯度上升"></a>梯度上升</h2><p>对于梯度下降法来说，在神经网络中用到，最小化误差的一种优化方法</p><p>在梯度上升法是在逻辑回归中求概率最大值，即求最大似然函数的最大值用到的方法</p><h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    dataMat = []</span><br><span class="line">    labelMat = []</span><br><span class="line">    fr = open(<span class="string">'testSet.txt'</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        lineArr = line.strip().split()</span><br><span class="line">        dataMat.append([<span class="number">1.0</span>, float(lineArr[<span class="number">0</span>]), float(lineArr[<span class="number">1</span>])])</span><br><span class="line">        labelMat.append(int(lineArr[<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">return</span> dataMat, labelMat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(inX)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1</span>+exp(-inX))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradAscent</span><span class="params">(dataMatIn, classLabels)</span>:</span></span><br><span class="line">    dataMatrix = mat(dataMatIn)</span><br><span class="line">    labelMatix = mat(classLabels).transpose()</span><br><span class="line">    m = dataMatrix.shape[<span class="number">0</span>]</span><br><span class="line">    n = dataMatrix.shape[<span class="number">1</span>]</span><br><span class="line">    alpha = <span class="number">0.001</span></span><br><span class="line">    maxCycles = <span class="number">500</span></span><br><span class="line">    weights = ones((n, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(maxCycles):</span><br><span class="line">        h = sigmoid(dataMatrix*weights)</span><br><span class="line">        error = (labelMatix - h)</span><br><span class="line">        weights = weights + alpha * dataMatrix.transpose() * error</span><br><span class="line">    <span class="keyword">return</span> weights</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串的split用法</span></span><br><span class="line"><span class="number">1.</span>按某一个字符分割</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = (<span class="string">'www.google.com'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str</span><br><span class="line"><span class="string">'www.google.com'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str.split(<span class="string">'.'</span>)</span><br><span class="line">[<span class="string">'www'</span>, <span class="string">'google'</span>, <span class="string">'com'</span>]</span><br><span class="line"><span class="number">2.</span>按某一个字符分割，且分割n次。如按‘.’分割<span class="number">1</span>次</span><br><span class="line">str.split(<span class="string">'.'</span>，<span class="number">1</span>)</span><br><span class="line">&gt;&gt;&gt;str</span><br><span class="line">&gt;&gt;&gt;[<span class="string">'www'</span>, <span class="string">'google.com'</span>]</span><br><span class="line"><span class="number">3.</span>按某一字符串分割。如：‘||’</span><br><span class="line">str = (<span class="string">'WinXP||Win7||Win8||Win8.1'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str.split(<span class="string">'||'</span>)</span><br><span class="line">[<span class="string">'WinXP'</span>, <span class="string">'Win7'</span>, <span class="string">'Win8'</span>, <span class="string">'Win8.1'</span>]</span><br><span class="line"><span class="number">4.</span>按某一字符串分割，且分割n次。如：按‘||’分割<span class="number">2</span>次</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = (<span class="string">'WinXP||Win7||Win8||Win8.1'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str.split(<span class="string">'||'</span>,<span class="number">2</span>)</span><br><span class="line">[<span class="string">'WinXP'</span>, <span class="string">'Win7'</span>, <span class="string">'Win8||Win8.1'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#strip()函数</span></span><br><span class="line"><span class="number">1.</span> 当rm为空时，默认删除空白符（包括<span class="string">'\n'</span>, <span class="string">'\r'</span>,  <span class="string">'\t'</span>,  <span class="string">' '</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'   Hello World   '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'   Hello World   '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.strip()</span><br><span class="line"><span class="string">'Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="string">'\t\r\npython'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="string">'\t\r\npython'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.strip()</span><br><span class="line"><span class="string">'python'</span></span><br><span class="line"><span class="number">2.</span>rm删除序列是只要边（开头或结尾）上的字符在删除序列内，就删除掉。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aString=<span class="string">'123love'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aString</span><br><span class="line"><span class="string">'123love'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aString.strip(<span class="string">'12'</span>)</span><br><span class="line"><span class="string">'3love'</span></span><br><span class="line"><span class="comment">#zeros函数和ones函数</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=zeros((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=ones((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=eye(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>]])</span><br><span class="line">numpy.eye(N,M=<span class="literal">None</span>, k=<span class="number">0</span>, dtype=&lt;type <span class="string">'float'</span>&gt;)</span><br><span class="line">第一个参数：输出方阵（行数=列数）的规模，即行数或列数</span><br><span class="line"></span><br><span class="line">第三个参数：默认情况下输出的是对角线全“<span class="number">1</span>”，其余全“<span class="number">0</span>”的方阵，</span><br><span class="line">如果k为正整数，则在右上方第k条对角线全“<span class="number">1</span>”其余全“<span class="number">0</span>”，</span><br><span class="line">k为负整数则在左下方第k条对角线全“<span class="number">1</span>”其余全“<span class="number">0</span>”。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=eye(<span class="number">3</span>,<span class="number">4</span>,k=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#转置有三种方式，transpose方法、T属性以及swapaxes方法。</span></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: arr = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>)<span class="comment">#生成一个4行5列的数组</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: arr</span><br><span class="line">Out[<span class="number">3</span>]:</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</span><br><span class="line">       [ <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">       [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: arr.T <span class="comment">#求转置</span></span><br><span class="line">Out[<span class="number">4</span>]:</span><br><span class="line">array([[ <span class="number">0</span>,  <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>],</span><br><span class="line">       [ <span class="number">1</span>,  <span class="number">6</span>, <span class="number">11</span>, <span class="number">16</span>],</span><br><span class="line">       [ <span class="number">2</span>,  <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>],</span><br><span class="line">       [ <span class="number">3</span>,  <span class="number">8</span>, <span class="number">13</span>, <span class="number">18</span>],</span><br><span class="line">       [ <span class="number">4</span>,  <span class="number">9</span>, <span class="number">14</span>, <span class="number">19</span>]])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = np.arange(<span class="number">16</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = A.reshape(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)<span class="comment">#将A变换为三维矩阵</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.shape</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">说明这是一个<span class="number">2</span>*<span class="number">2</span>*<span class="number">4</span>的数组（矩阵），返回的是一个元组，可以对元组进行索引，也就是<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">A.transpose((<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>))  <span class="comment">#保持A不变</span></span><br><span class="line">A.transpose((<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>))  <span class="comment">#将 0轴 和 1轴 交换</span></span><br></pre></td></tr></table></figure><img src="/2019/02/03/Logistic回归/transpose1.png" title="t1"><img src="/2019/02/03/Logistic回归/transpose2.png" title="t2"><h2 id="正规方程-normal-equation"><a href="#正规方程-normal-equation" class="headerlink" title="正规方程(normal equation)"></a>正规方程(normal equation)</h2><p>一种直接求解参数的方法</p><img src="/2019/02/03/Logistic回归/hx.png" title="hxi"><img src="/2019/02/03/Logistic回归/zhenggui.png" title="zhenggu"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">octave:1&gt; X = [1,2104,5,1,45;1,1416,3,2,40;1,1534,3,2,30;1,852,2,1,36]</span><br><span class="line">X =</span><br><span class="line"></span><br><span class="line">      1   2104      5      1     45</span><br><span class="line">      1   1416      3      2     40</span><br><span class="line">      1   1534      3      2     30</span><br><span class="line">      1    852      2      1     36</span><br><span class="line"></span><br><span class="line">octave:2&gt; y = [460;232;315;178]</span><br><span class="line">y =</span><br><span class="line"></span><br><span class="line">   460</span><br><span class="line">   232</span><br><span class="line">   315</span><br><span class="line">   178</span><br><span class="line"></span><br><span class="line">octave:3&gt; pinv(X&apos;*X)*X&apos;*y</span><br><span class="line">ans =</span><br><span class="line"></span><br><span class="line">   188.40032</span><br><span class="line">     0.38663</span><br><span class="line">   -56.13825</span><br><span class="line">   -92.96725</span><br><span class="line">    -3.73782</span><br><span class="line">    </span><br><span class="line">#举例验证</span><br><span class="line"></span><br><span class="line">octave:4&gt; ex = [1,852,2,1,36]</span><br><span class="line">ex =</span><br><span class="line"></span><br><span class="line">     1   852     2     1    36</span><br><span class="line"></span><br><span class="line">octave:5&gt; ex*ans</span><br><span class="line">ans =  178.00</span><br></pre></td></tr></table></figure><h4 id="正规方程与梯度下降的比较"><a href="#正规方程与梯度下降的比较" class="headerlink" title="正规方程与梯度下降的比较"></a>正规方程与梯度下降的比较</h4><img src="/2019/02/03/Logistic回归/zhengandgrand.png" title="c"><p><a href="https://blog.csdn.net/melon__/article/details/80589759" target="_blank" rel="noopener">推导过程</a></p><h2 id="Logistic-regression"><a href="#Logistic-regression" class="headerlink" title="Logistic regression"></a>Logistic regression</h2><p>Logistic本质上是一个基于条件概率的判别模型(DiscriminativeModel)。利用了Sigmoid函数值域在[0,1]这个特性。<br>直接使用线性回归的输出作为概率是有问题的，因为其值有可能小于0或者大于1,这是不符合实际情况的，逻辑回归的输出正是[0,1]区间。</p><img src="/2019/02/03/Logistic回归/whylogistic.png" title="whylogistic"><p>Logistic 回归通过使用其固有的 logistic 函数估计概率，来衡量因变量（我们想要预测的标签）与一个或多个自变量（特征）之间的关系。</p><h2 id="sigmoid-函数"><a href="#sigmoid-函数" class="headerlink" title="sigmoid 函数"></a>sigmoid 函数</h2><p>Sigmoid 函数是一个 S 形曲线，它可以将任意实数值映射到介于 0 和 1 之间的值，但并不会取到 0/1。然后使用阈值分类器将 0 和 1 之间的值转换为 0 或 1。</p><img src="/2019/02/03/Logistic回归/sigmoid.png" title="sigmoid"><h4 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h4><img src="/2019/02/03/Logistic回归/Decision_Boundary.png" title="DB"><h4 id="为什么使用sigmoid-function"><a href="#为什么使用sigmoid-function" class="headerlink" title="为什么使用sigmoid function"></a>为什么使用sigmoid function</h4><img src="/2019/02/03/Logistic回归/why_choose_sigmoid.png" title="why">]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> NLP </tag>
            
            <tag> Octave </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>词袋和TF-IDF模型</title>
      <link href="/2019/01/27/%E8%AF%8D%E8%A2%8B%E5%92%8CTF-IDF%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/01/27/%E8%AF%8D%E8%A2%8B%E5%92%8CTF-IDF%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>在做文本分类等问题时,需要从大量语料中提取特征,词袋和TF-IDF模型是很好的选择</p><a id="more"></a><h3 id="词袋模型"><a href="#词袋模型" class="headerlink" title="词袋模型"></a>词袋模型</h3><p>词袋模型是最原始的一类特征集，忽略掉了文本的语法和语序，用一组无序的单词序列来表达一段文字或者一个文档。可以这样理解，把整个文档集的所有出现的词都丢进袋子里面，然后无序的排出来（去掉重复的）。对每一个文档，按照词语出现的次数来表示文档。</p><p>句子1：我/有/一个/苹果</p><p>句子2：我/明天/去/一个/地方</p><p>句子3：你/到/一个/地方</p><p>句子4：我/有/我/最爱的/你</p><p>把所有词丢进一个袋子：我，有，一个，苹果，明天，去，地方，你，到，最爱的。这 4 句话中总共出现了这 10 个词。</p><p>建立一个无序列表：我，有，一个，苹果，明天，去，地方，你，到，最爱的。并根据每个句子中词语出现的次数来表示每个句子。</p><img src="/2019/01/27/词袋和TF-IDF模型/cidai.png" title="cidai"><ul><li>句子 1 特征: ( 1 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 )</li><li>句子 2 特征: ( 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 0 )</li><li>句子 3 特征: ( 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 )</li><li>句子 4 特征: ( 2 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 )</li></ul><h3 id="TF-IDF-模型"><a href="#TF-IDF-模型" class="headerlink" title="TF-IDF 模型"></a>TF-IDF 模型</h3><p>这种模型主要是用词汇的统计特征来作为特征集。TF-IDF 由两部分组成：TF（Term frequency，词频），IDF（Inverse document frequency，逆文档频率）两部分组成。</p><img src="/2019/01/27/词袋和TF-IDF模型/tf_idf.png" title="tf_idf"><img src="/2019/01/27/词袋和TF-IDF模型/tfidf.png" title="tfidf"><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在 Python 当中，我们可以通过 scikit-learn 来分别实现词袋模型以及 TF-IDF 模型。并且，使用 scikit-learn 库将会非常简单。这里要用到 CountVectorizer() 类以及 TfidfVectorizer() 类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#词袋</span></span><br><span class="line">sklearn.featur_extraction.text.CountVectorizer(min_df=<span class="number">1</span>, ngram_range=(<span class="number">1</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><ul><li><p>min_df :忽略掉词频严格低于定阈值的词</p></li><li><p>ngram_range :将 text 分成 n1,n1+1,……,n2个不同的词组。比如比如’Python is useful’中ngram_range(1,3)之后可得到 ‘Python’ ， ‘is’ ， ‘useful’ ， ‘Python is’ ， ‘is useful’ ， ‘Python is useful’。如果是ngram_range (1,1) 则只能得到单个单词’Python’ ， ‘is’ ， ‘useful’。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Tf-idf</span></span><br><span class="line">sklearn.feature_extraction.text.TfidfVectorizer(min_df=<span class="number">1</span>,norm=<span class="string">'l2'</span>,smooth_idf=<span class="literal">True</span>,use_idf=<span class="literal">True</span>,ngram_range=(<span class="number">1</span>,<span class="number">1</span>)）</span><br></pre></td></tr></table></figure><ul><li><p>min_df： 忽略掉词频严格低于定阈值的词。</p></li><li><p>norm ：标准化词条向量所用的规范。</p></li><li><p>smooth_idf：添加一个平滑 idf 权重，即 idf 的分母是否使用平滑，防止0权重的出现。</p></li><li><p>use_idf： 启用 idf 逆文档频率重新加权。</p></li><li><p>ngram_range：同词袋模型</p></li></ul><h4 id="词袋"><a href="#词袋" class="headerlink" title="词袋"></a>词袋</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加载词袋类</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="comment">#调整类的参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vectorizer = CountVectorizer(min_df=<span class="number">1</span>, ngram_range=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment">#建立文本库</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>corpus = [<span class="string">'This is the first document.'</span>,</span><br><span class="line"><span class="meta">... </span>          <span class="string">'This is the second second document.'</span>,</span><br><span class="line"><span class="meta">... </span>          <span class="string">'And the third one.'</span>,</span><br><span class="line"><span class="meta">... </span>          <span class="string">'Is this the first document?'</span>]</span><br><span class="line"><span class="comment">#训练corpus获取词袋特征</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = vectorizer.fit_transform(corpus)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">  (<span class="number">0</span>, <span class="number">1</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">0</span>, <span class="number">2</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">0</span>, <span class="number">6</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">0</span>, <span class="number">3</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">0</span>, <span class="number">8</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">5</span>)        <span class="number">2</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">1</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">6</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">3</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">8</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>, <span class="number">4</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>, <span class="number">7</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>, <span class="number">0</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">2</span>, <span class="number">6</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">1</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">2</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">6</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">3</span>)        <span class="number">1</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">8</span>)        <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.toarray()</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]], dtype=int64)</span><br><span class="line"><span class="comment">#获取特征值       </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vectorizer.get_feature_names()</span><br><span class="line">[<span class="string">'and'</span>, <span class="string">'document'</span>, <span class="string">'first'</span>, <span class="string">'is'</span>, <span class="string">'one'</span>, <span class="string">'second'</span>, <span class="string">'the'</span>, <span class="string">'third'</span>, <span class="string">'this'</span>]</span><br></pre></td></tr></table></figure><h4 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vectorizer = TfidfVectorizer(</span><br><span class="line"><span class="meta">... </span>    min_df=<span class="number">1</span>, norm=<span class="string">'l2'</span>, smooth_idf=<span class="literal">True</span>, use_idf=<span class="literal">True</span>, ngram_range=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = vectorizer.fit_transform(corpus)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line">  (<span class="number">0</span>, <span class="number">8</span>)        <span class="number">0.4387767428592343</span></span><br><span class="line">  (<span class="number">0</span>, <span class="number">3</span>)        <span class="number">0.4387767428592343</span></span><br><span class="line">  (<span class="number">0</span>, <span class="number">6</span>)        <span class="number">0.35872873824808993</span></span><br><span class="line">  (<span class="number">0</span>, <span class="number">2</span>)        <span class="number">0.5419765697264572</span></span><br><span class="line">  (<span class="number">0</span>, <span class="number">1</span>)        <span class="number">0.4387767428592343</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">8</span>)        <span class="number">0.27230146752334033</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">3</span>)        <span class="number">0.27230146752334033</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">6</span>)        <span class="number">0.2226242923251039</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">1</span>)        <span class="number">0.27230146752334033</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">5</span>)        <span class="number">0.8532257361452784</span></span><br><span class="line">  (<span class="number">2</span>, <span class="number">6</span>)        <span class="number">0.2884767487500274</span></span><br><span class="line">  (<span class="number">2</span>, <span class="number">0</span>)        <span class="number">0.5528053199908667</span></span><br><span class="line">  (<span class="number">2</span>, <span class="number">7</span>)        <span class="number">0.5528053199908667</span></span><br><span class="line">  (<span class="number">2</span>, <span class="number">4</span>)        <span class="number">0.5528053199908667</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">8</span>)        <span class="number">0.4387767428592343</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">3</span>)        <span class="number">0.4387767428592343</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">6</span>)        <span class="number">0.35872873824808993</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">2</span>)        <span class="number">0.5419765697264572</span></span><br><span class="line">  (<span class="number">3</span>, <span class="number">1</span>)        <span class="number">0.4387767428592343</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.toarray()</span><br><span class="line">array([[<span class="number">0.</span>        , <span class="number">0.43877674</span>, <span class="number">0.54197657</span>, <span class="number">0.43877674</span>, <span class="number">0.</span>        ,</span><br><span class="line">        <span class="number">0.</span>        , <span class="number">0.35872874</span>, <span class="number">0.</span>        , <span class="number">0.43877674</span>],</span><br><span class="line">       [<span class="number">0.</span>        , <span class="number">0.27230147</span>, <span class="number">0.</span>        , <span class="number">0.27230147</span>, <span class="number">0.</span>        ,</span><br><span class="line">        <span class="number">0.85322574</span>, <span class="number">0.22262429</span>, <span class="number">0.</span>        , <span class="number">0.27230147</span>],</span><br><span class="line">       [<span class="number">0.55280532</span>, <span class="number">0.</span>        , <span class="number">0.</span>        , <span class="number">0.</span>        , <span class="number">0.55280532</span>,</span><br><span class="line">        <span class="number">0.</span>        , <span class="number">0.28847675</span>, <span class="number">0.55280532</span>, <span class="number">0.</span>        ],</span><br><span class="line">       [<span class="number">0.</span>        , <span class="number">0.43877674</span>, <span class="number">0.54197657</span>, <span class="number">0.43877674</span>, <span class="number">0.</span>        ,</span><br><span class="line">        <span class="number">0.</span>        , <span class="number">0.35872874</span>, <span class="number">0.</span>        , <span class="number">0.43877674</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vectorizer.get_feature_names()</span><br><span class="line">[<span class="string">'and'</span>, <span class="string">'document'</span>, <span class="string">'first'</span>, <span class="string">'is'</span>, <span class="string">'one'</span>, <span class="string">'second'</span>, <span class="string">'the'</span>, <span class="string">'third'</span>, <span class="string">'this'</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结巴中文分词</title>
      <link href="/2019/01/27/jieba-%E7%BB%93%E5%B7%B4%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/"/>
      <url>/2019/01/27/jieba-%E7%BB%93%E5%B7%B4%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p>jieba: Python中很好用的中文分词组件</p><a id="more"></a><h3 id="分词模式"><a href="#分词模式" class="headerlink" title="分词模式"></a>分词模式</h3><ul><li><p>精确模式，试图将句子最精确地切开，适合文本分析；</p></li><li><p>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</p></li><li><p>搜索引擎模式，在精确模式的基础上，对长词再次切分，适合用于搜索引擎分词。</p></li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>1.分词</p><ul><li><p>jieba.cut 方法接受三个输入参数: 需要分词的字符串；cut_all 参数用来控制是否采用全模式；HMM 参数用来控制是否使用 HMM 模型</p></li><li><p>jieba.cut_for_search 方法接受两个参数：需要分词的字符串；是否使用 HMM 模型。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细</p></li></ul><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"Full Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 全模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">False</span>)</span><br><span class="line">print(<span class="string">"Default Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 精确模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"他来到了网易杭研大厦"</span>)  <span class="comment"># 默认是精确模式</span></span><br><span class="line">print(<span class="string">", "</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">"小明硕士毕业于中国科学院计算所，后在日本京都大学深造"</span>)  <span class="comment"># 搜索引擎模式</span></span><br><span class="line">print(<span class="string">", "</span>.join(seg_list))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</span><br><span class="line"></span><br><span class="line">【精确模式】: 我/ 来到/ 北京/ 清华大学</span><br><span class="line"></span><br><span class="line">【新词识别】：他, 来到, 了, 网易, 杭研, 大厦    (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)</span><br><span class="line"></span><br><span class="line">【搜索引擎模式】： 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</span><br></pre></td></tr></table></figure><p>2.词典</p><ul><li><p>载入:  jieba.load_userdict(file_name)  其中file_name 为文件类对象或自定义词典的路径. 词典格式和 dict.txt 一样，一个词占一行；每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开，顺序不可颠倒。</p></li><li><p>动态修改: 使用 add_word(word, freq=None, tag=None) 和 del_word(word) 可在程序中动态修改词典。使用 suggest_freq(segment, tune=True) 可调节单个词语的词频，使其能（或不能）被分出来。</p></li></ul><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'如果放到post中将出错。'</span>, HMM=<span class="literal">False</span>)))</span><br><span class="line">如果/放到/post/中将/出错/。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jieba.suggest_freq((<span class="string">'中'</span>, <span class="string">'将'</span>), <span class="literal">True</span>)</span><br><span class="line"><span class="number">494</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'如果放到post中将出错。'</span>, HMM=<span class="literal">False</span>)))</span><br><span class="line">如果/放到/post/中/将/出错/。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'「台中」正确应该不会被切开'</span>, HMM=<span class="literal">False</span>)))</span><br><span class="line">「/台/中/」/正确/应该/不会/被/切开</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jieba.suggest_freq(<span class="string">'台中'</span>, <span class="literal">True</span>)</span><br><span class="line"><span class="number">69</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'「台中」正确应该不会被切开'</span>, HMM=<span class="literal">False</span>)))</span><br><span class="line">「/台中/」/正确/应该/不会/被/切开</span><br></pre></td></tr></table></figure><p>3.过滤</p><p>利用 jiaba 来做一个简单过滤器，这个在实际的应用中十分常用。比如有的词“的”，“地”，“得”，对数据分析没有什么实际作用，但是文章中大量的这类词又会占据大量的存储资源，因此我们要过滤掉这类词。</p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stopwords = (<span class="string">'的'</span>, <span class="string">'地'</span>, <span class="string">'得'</span>) <span class="comment">#停用词表</span></span><br><span class="line">a = []</span><br><span class="line">seg_list = jieba.cut(string, cut_all=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> seg_list:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</span><br><span class="line">        a.append(word)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">参考文档</a><br><a href="https://www.shiyanlou.com/courses/1208/labs/9015/document" target="_blank" rel="noopener">参考文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正向最大匹配算法</title>
      <link href="/2019/01/23/%E6%AD%A3%E5%90%91%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/"/>
      <url>/2019/01/23/%E6%AD%A3%E5%90%91%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>正向最大匹配法（Maximum Match Method，MM 法）是指从左向右按最大原则与词典里面的词进行匹配。假设词典中最长词是 m个字，那么从待切分文本的最左边取 m个字符与词典进行匹配，如果匹配成功，则分词, 如果匹配不成功，那么取 m−1 个字符与词典匹配，直到成功匹配为止。</p><a id="more"></a><h2 id="正向最大匹配法"><a href="#正向最大匹配法" class="headerlink" title="正向最大匹配法"></a>正向最大匹配法</h2><blockquote><p>示例</p></blockquote><p>句子： 中华民族从此站起来了<br>词典：”中华”，”民族”，”从此”，”站起来了”</p><p>第一步：词典中最长是 4 个字，所以我们将 “中华民族” 取出来与词典进行匹配，匹配失败。<br>第二步：于是，去掉 “族”，以 “中华民” 进行匹配，匹配失败<br>第三步：去掉 “中华民” 中的 “民”，以 “中华” 进行匹配，匹配成功。<br>第四步：在带切分句子中去掉匹配成功的词，待切分句子变成 “民族从此站起来了”。<br>第五步：重复上面的第 1 - 4 步骤<br>第六步：若最后一个词语匹配成功，结束。<br>最终句子被分成：“中华 / 民族 / 从此 / 站起来了 ”</p><h4 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h4><img src="/2019/01/23/正向最大匹配算法/流程图.png" title="流程图"><h4 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文本</span></span><br><span class="line">text = <span class="string">'我觉得西亚斯是一所很美丽的大学'</span></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line">dic = (<span class="string">'美丽'</span>, <span class="string">'觉得'</span>, <span class="string">'西亚斯'</span>, <span class="string">'我'</span>, <span class="string">'大学'</span>, <span class="string">'是'</span>, <span class="string">'一所'</span>, <span class="string">'很'</span>,  <span class="string">'的'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个空数组存放分词结果</span></span><br><span class="line">words = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化最长词长度为0</span></span><br><span class="line">max_len_word = <span class="number">0</span></span><br><span class="line"><span class="comment"># 遍历获取最大词长度</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">if</span>(len(key)) &gt; max_len_word:</span><br><span class="line">        max_len_word = len(key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> len(text) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># word_len先等于最大长度 然后逐渐减小</span></span><br><span class="line">    word_len = max_len_word</span><br><span class="line">    <span class="comment"># 对每个字符串可能有(max_len_word)次循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, max_len_word):</span><br><span class="line">        word = text[<span class="number">0</span>: word_len]</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> dic:</span><br><span class="line">            word_len -= <span class="number">1</span></span><br><span class="line">            word = []</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text = text[word_len:]</span><br><span class="line">            words.append(word)</span><br><span class="line">            word = []</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> ALG </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Standard Template Library</title>
      <link href="/2018/12/08/Standard-Template-Library/"/>
      <url>/2018/12/08/Standard-Template-Library/</url>
      
        <content type="html"><![CDATA[<p>STL具有高性能,高移植性和代码重用性高的优点.</p><a id="more"></a><h4 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h4><blockquote><p>sort(startaddress, endaddress)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a[])</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]= &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>&#125;; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n The array before sorting is : "</span>; </span><br><span class="line">show(a); </span><br><span class="line"></span><br><span class="line">sort(a, a+<span class="number">10</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\n The array after sorting is : "</span>; </span><br><span class="line">show(a); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Refer  <a href="https://www.geeksforgeeks.org/sort-c-stl/" target="_blank" rel="noopener">std::sort()</a> for more details.</p><h4 id="Searching"><a href="#Searching" class="headerlink" title="Searching"></a>Searching</h4><blockquote><p>binary_search(startaddress, endaddress, valuetofind)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CPP program to implement </span></span><br><span class="line"><span class="comment">// Binary Search in </span></span><br><span class="line"><span class="comment">// Standard Template Library (STL) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> arraysize)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arraysize; ++i) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span> &#125;; </span><br><span class="line"><span class="keyword">int</span> asize = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n The array is : "</span>; </span><br><span class="line">show(a, asize); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\nLet's say we want to search for 2 in the array"</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n So, we first sort the array"</span>; </span><br><span class="line">sort(a, a + asize); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\n The array after sorting is : "</span>; </span><br><span class="line">show(a, asize); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\nNow, we do the binary search"</span>; </span><br><span class="line"><span class="keyword">if</span> (binary_search(a, a + <span class="number">10</span>, <span class="number">2</span>)) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nElement found in the array"</span>; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nElement not found in the array"</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n\nNow, say we want to search for 10"</span>; </span><br><span class="line"><span class="keyword">if</span> (binary_search(a, a + <span class="number">10</span>, <span class="number">10</span>)) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nElement found in the array"</span>; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nElement not found in the array"</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.geeksforgeeks.org/stdbsearch-in-cpp/" target="_blank" rel="noopener">std::bsearch</a> in C++</p><h4 id="Important-STL-Algorithms"><a href="#Important-STL-Algorithms" class="headerlink" title="Important STL Algorithms"></a>Important STL Algorithms</h4><p><a href="https://www.geeksforgeeks.org/c-magicians-stl-algorithms/" target="_blank" rel="noopener">C++ Magicians STL</a></p><p><a href="https://www.geeksforgeeks.org/algorithms-library-c-stl/" target="_blank" rel="noopener">Library in c++ STL</a></p><ol><li><p>sort(first_iterator, last_iterator) – To sort the given vector.</p></li><li><p>reverse(first_iterator, last_iterator) – To reverse a vector.</p></li><li><p>*max_element (first_iterator, last_iterator) – To find the maximum element of a vector.</p></li><li><p>*min_element (first_iterator, last_iterator) – To find the minimum element of a vector.</p></li><li><p>accumulate(first_iterator, last_iterator, initial value of sum) – Does the summation of vector elements</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A C++ program to demonstrate working of sort(), </span></span><br><span class="line"><span class="comment">// reverse() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt; //For accumulate operation </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing vector with array values </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">23</span> ,<span class="number">42</span> , <span class="number">15</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vect(arr, arr+n); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Vector is: "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Sorting the Vector in Ascending order </span></span><br><span class="line">sort(vect.begin(), vect.end()); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nVector after sorting is: "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Reversing the Vector </span></span><br><span class="line">reverse(vect.begin(), vect.end()); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nVector after reversing is: "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nMaximum element of vector is: "</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *max_element(vect.begin(), vect.end()); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nMinimum element of vector is: "</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *min_element(vect.begin(), vect.end()); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Starting the summation from 0 </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nThe summation of vector elements is: "</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(vect.begin(), vect.end(), <span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><p>count(first_iterator, last_iterator,x) – To count the occurrences of x in vector.</p></li><li><p>find(first_iterator, last_iterator, x) – Points to last address of vector ((name_of_vector).end()) if element is not present in vector.</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ program to demonstrate working of count() </span></span><br><span class="line"><span class="comment">// and find() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing vector with array values </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">23</span> ,<span class="number">42</span>, <span class="number">20</span>, <span class="number">15</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vect(arr, arr+n); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Occurrences of 20 in vector : "</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Counts the occurrences of 20 from 1st to </span></span><br><span class="line"><span class="comment">// last element </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count(vect.begin(), vect.end(), <span class="number">20</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// find() returns iterator to last address if </span></span><br><span class="line"><span class="comment">// element not present </span></span><br><span class="line">find(vect.begin(), vect.end(),<span class="number">5</span>) != vect.end()? </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nElement found"</span>: </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nElement not found"</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><p>binary_search(first_iterator, last_iterator, x) – Tests whether x exists in sorted vector or not.</p></li><li><p>lower_bound(first_iterator, last_iterator, x) – returns an iterator pointing to the first element in the range [first,last) which has a value not less than ‘x’.</p></li><li><p>upper_bound(first_iterator, last_iterator, x) – returns an iterator pointing to the first element in the range [first,last) which has a value greater than ‘x’.</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ program to demonstrate working of lower_bound() </span></span><br><span class="line"><span class="comment">// and upper_bound(). </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing vector with array values </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">45</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vect(arr, arr+n); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort the array to make sure that lower_bound() </span></span><br><span class="line"><span class="comment">// and upper_bound() work. </span></span><br><span class="line">sort(vect.begin(), vect.end()); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the first occurrence of 20 </span></span><br><span class="line"><span class="keyword">auto</span> q = lower_bound(vect.begin(), vect.end(), <span class="number">20</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the last occurrence of 20 </span></span><br><span class="line"><span class="keyword">auto</span> p = upper_bound(vect.begin(), vect.end(), <span class="number">20</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The lower bound is at position: "</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; q-vect.begin() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The upper bound is at position: "</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p-vect.begin() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li><p>arr.erase(position to be deleted) – This erases selected element in vector and shifts and resizes the vector elements accordingly.</p></li><li><p>arr.erase(unique(arr.begin(),arr.end()),arr.end()) – This erases the duplicate occurrences in sorted vector in a single line.</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ program to demonstrate working of erase() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing vector with array values </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">45</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vect(arr, arr+n); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Vector is :"</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i]&lt;&lt;<span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete second element of vector </span></span><br><span class="line">vect.erase(vect.begin()+<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nVector after erasing the element: "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// sorting to enable use of unique() </span></span><br><span class="line">sort(vect.begin(), vect.end()); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nVector before removing duplicate "</span></span><br><span class="line"><span class="string">" occurrences: "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Deletes the duplicate occurrences </span></span><br><span class="line">vect.erase(unique(vect.begin(),vect.end()),vect.end()); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nVector after deleting duplicates: "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; vect.size(); i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="13"><li><p>next_permutation(first_iterator, last_iterator) – This modified the vector to its next permutation.</p></li><li><p>prev_permutation(first_iterator, last_iterator) – This modified the vector to its previous permutation.</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ program to demonstrate working of next_permutation() </span></span><br><span class="line"><span class="comment">// and prev_permutation() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing vector with array values </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">45</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vect(arr, arr+n); </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Given Vector is:\n"</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// modifies vector to its next permutation order </span></span><br><span class="line">next_permutation(vect.begin(), vect.end()); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nVector after performing next permutation:\n"</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line">prev_permutation(vect.begin(), vect.end()); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nVector after performing prev permutation:\n"</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vect[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="15"><li>distance(first_iterator,desired_position) – It returns the distance of desired position from the first iterator.This function is very useful while finding the index.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ program to demonstrate working of distance() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing vector with array values </span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">45</span>&#125;; </span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vect(arr, arr+n); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Return distance of first to maximum element </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Distance between first to max element: "</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; distance(vect.begin(), </span><br><span class="line">max_element(vect.begin(), vect.end())); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Useful-Array-algorithms"><a href="#Useful-Array-algorithms" class="headerlink" title="Useful Array algorithms"></a>Useful Array algorithms</h4><p><a href="https://www.geeksforgeeks.org/useful-array-algorithms-in-c-stl/" target="_blank" rel="noopener">Array in C++ STL</a></p><ol><li>all_of()</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ code to demonstrate working of all_of() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; // for all_of() </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing array </span></span><br><span class="line"><span class="keyword">int</span> ar[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">-6</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Checking if all elements are positive </span></span><br><span class="line">all_of(ar, ar+<span class="number">6</span>, [](<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> x&gt;<span class="number">0</span>; &#125;)? </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"All are positive elements"</span> : </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"All are not positive elements"</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>any_of()</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ code to demonstrate working of any_of() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; // for any_of() </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing array </span></span><br><span class="line"><span class="keyword">int</span> ar[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">-6</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Checking if any element is negative </span></span><br><span class="line">any_of(ar, ar+<span class="number">6</span>, [](<span class="keyword">int</span> x)&#123; <span class="keyword">return</span> x&lt;<span class="number">0</span>; &#125;)? </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"There exists a negative element"</span> : </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"All are positive elements"</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>none_of()</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ code to demonstrate working of none_of() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; // for none_of() </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing array </span></span><br><span class="line"><span class="keyword">int</span> ar[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Checking if no element is negative </span></span><br><span class="line">none_of(ar, ar+<span class="number">6</span>, [](<span class="keyword">int</span> x)&#123; <span class="keyword">return</span> x&lt;<span class="number">0</span>; &#125;)? </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No negative elements"</span> : </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"There are negative elements"</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>copy_n()</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ code to demonstrate working of copy_n() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; // for copy_n() </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing array </span></span><br><span class="line"><span class="keyword">int</span> ar[<span class="number">6</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Declaring second array </span></span><br><span class="line"><span class="keyword">int</span> ar1[<span class="number">6</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Using copy_n() to copy contents </span></span><br><span class="line">copy_n(ar, <span class="number">6</span>, ar1); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Displaying the copied array </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The new array after copying is : "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span> ; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ar1[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>iota()</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ code to demonstrate working of iota() </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt; // for iota() </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="comment">// Initializing array with 0 values </span></span><br><span class="line"><span class="keyword">int</span> ar[<span class="number">6</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Using iota() to assign values </span></span><br><span class="line">iota(ar, ar+<span class="number">6</span>, <span class="number">20</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Displaying the new array </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The new array after assigning values is : "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span> ; i++) </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ar[i] &lt;&lt; <span class="string">" "</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待续</p>]]></content>
      
      
      <categories>
          
          <category> CPP方向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ALG </tag>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt实践:简易计算器</title>
      <link href="/2018/12/08/Qt%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE%E4%B8%80-%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2018/12/08/Qt%E5%AE%9E%E8%B7%B5%E9%A1%B9%E7%9B%AE%E4%B8%80-%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>什么是MVC设计模式,以及MVC设计模式又怎样的优缺点.</p><a id="more"></a><h3 id="MVC-设计模式"><a href="#MVC-设计模式" class="headerlink" title="MVC 设计模式"></a>MVC 设计模式</h3><img src="/2018/12/08/Qt实践项目一-简易计算器/MVC.png" title="MAV设计模式"><blockquote><p>优点</p></blockquote><ul><li>同步开发 - 多个开发人员可以同时处理模型，控制器和视图。由于MVC将应用程序的各个组件分离，因此开发人员能够在不同组件上并行工作，而不会相互影响或阻塞。例如，团队可能会将开发人员分为前端和后端。后端开发人员可以设计数据结构以及用户如何与之交互，而无需完成用户界面。相反，前端开发人员能够在数据结构可用之前设计和测试应用程序的布局。</li><li>代码重用 - 通过创建彼此独立的组件，开发人员能够在其他应用程序中快速轻松地重用组件。对于具有不同数据的另一个应用程序，可以为一个应用程序重构相同（或类似）的视图，因为视图只是处理数据如何显示给用户。</li><li><a href="https://www.cnblogs.com/robnetcn/archive/2012/04/15/2449008.html" target="_blank" rel="noopener">高内聚</a> - MVC可以在控制器上对相关操作进行逻辑分组。特定模型的视图也组合在一起。</li><li>低耦合 - MVC框架的本质是模型，视图或控制器之间的耦合较低。</li><li>易于修改 - 由于责任分离，未来的开发或修改更容易。</li><li>模型的多个视图 - 模型可以有多个视图。</li></ul><blockquote><p>缺点</p></blockquote><ul><li>显着的学习曲线 - 关于多种技术的知识成为常态。使用MVC的开发人员需要熟练掌握多种技术。</li><li>代码导航 - 框架导航可能很复杂，因为它引入了新的抽象层，并要求用户适应MVC的分解标准。</li><li>多伪影一致性 - 将特征分解为三个伪影会导致散射。因此，要求开发人员一次保持多个表示的一致性。</li></ul><h3 id="简易计算器的实现"><a href="#简易计算器的实现" class="headerlink" title="简易计算器的实现"></a>简易计算器的实现</h3><blockquote><p>新建项目</p></blockquote><img src="/2018/12/08/Qt实践项目一-简易计算器/New_project.png" title="New_paoject"><img src="/2018/12/08/Qt实践项目一-简易计算器/Application.png" title="Qt_Widgets"><img src="/2018/12/08/Qt实践项目一-简易计算器/Location.png" title="Location"><img src="/2018/12/08/Qt实践项目一-简易计算器/Kits.png" title="Kits"><img src="/2018/12/08/Qt实践项目一-简易计算器/Details.png" title="Details"><img src="/2018/12/08/Qt实践项目一-简易计算器/Beg.png" title="First_view"><blockquote><p>文件夹中各个文件的作用</p></blockquote><ul><li><a href="https://blog.csdn.net/simonforfuture/article/details/78580510" target="_blank" rel="noopener">.pro文件</a>：跨平台性的实质所在，其中记录着项目中的所有信息，来到不同的平台下依据该文件生成相同功能效果的可执行程序。</li><li>mainwindom.h文件：类的声明</li><li>main.cpp 文件</li><li>mainwindow.cpp文件：类的定义</li><li>.ui文件：界面文件，有两种编辑形式，一种是利用Qt Designer设置部件，另一种是以代码的形式</li></ul><h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><img src="/2018/12/08/Qt实践项目一-简易计算器/界面效果.png" title="界面效果"><h3 id="main-h文件"><a href="#main-h文件" class="headerlink" title="main.h文件"></a>main.h文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#ifndef EXPR_H</span><br><span class="line">#define EXPR_H</span><br><span class="line"></span><br><span class="line">#include &lt;QDialog&gt;</span><br><span class="line">#include &quot;QString&quot;</span><br><span class="line">#include &quot;model.h&quot;</span><br><span class="line">namespace Ui &#123;</span><br><span class="line">class expr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class expr : public QDialog</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    explicit expr(QWidget *parent = nullptr);</span><br><span class="line">    ~expr();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    Ui::expr *ui;</span><br><span class="line">    model *mode;</span><br><span class="line">    QString tmp;</span><br><span class="line">private slots:</span><br><span class="line">    void on_btn_0_clicked();</span><br><span class="line">    void on_btn_1_clicked();</span><br><span class="line">    void on_btn_2_clicked();</span><br><span class="line">    void on_btn_3_clicked();</span><br><span class="line">    void on_btn_4_clicked();</span><br><span class="line">    void on_btn_5_clicked();</span><br><span class="line">    void on_btn_6_clicked();</span><br><span class="line">    void on_btn_7_clicked();</span><br><span class="line">    void on_btn_8_clicked();</span><br><span class="line">    void on_btn_9_clicked();</span><br><span class="line">    void on_btn_plus_clicked();</span><br><span class="line">    void on_btn_min_clicked();</span><br><span class="line">    void on_btn_mul_clicked();</span><br><span class="line">    void on_btn_div_clicked();</span><br><span class="line">    void on_btn_clear_clicked();</span><br><span class="line">    void on_btn_equal_clicked();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // EXPR_H</span><br></pre></td></tr></table></figure><h3 id="mainwindow-cpp文件"><a href="#mainwindow-cpp文件" class="headerlink" title="mainwindow.cpp文件"></a>mainwindow.cpp文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"expr.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_expr.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"QString"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"QDebug"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"QDialog"</span></span></span><br><span class="line"></span><br><span class="line">expr::expr(QWidget *parent) :</span><br><span class="line">    QDialog(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::expr)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode = <span class="keyword">new</span> model;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp=<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">expr::~expr()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> expr::on_btn_0_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;tmp != <span class="string">""</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;tmp+=<span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_1_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp+=<span class="string">"1"</span>;</span><br><span class="line">    qDebug()&lt;&lt;<span class="keyword">this</span>-&gt;tmp;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_2_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp+=<span class="string">"2"</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> expr::on_btn_3_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp+=<span class="string">"3"</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_4_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp+=<span class="string">"4"</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_5_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp+=<span class="string">"5"</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_6_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp+=<span class="string">"6"</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_7_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp+=<span class="string">"7"</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_8_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp+=<span class="string">"8"</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_9_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp+=<span class="string">"9"</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="keyword">this</span>-&gt;tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_plus_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;tmp.toInt();</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Num1="</span>&lt;&lt;num;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode-&gt;setNum1(num);</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp = <span class="string">""</span>;</span><br><span class="line">    QString ex = <span class="keyword">this</span>-&gt;ui-&gt;btn_plus-&gt;text();</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode-&gt;setFlag(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_min_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;tmp.toInt();</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Num1="</span>&lt;&lt;num;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode-&gt;setNum1(num);</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp = <span class="string">""</span>;</span><br><span class="line">    QString ex = <span class="keyword">this</span>-&gt;ui-&gt;btn_min-&gt;text();</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode-&gt;setFlag(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_mul_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;tmp.toInt();</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Num1="</span>&lt;&lt;num;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode-&gt;setNum1(num);</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp = <span class="string">""</span>;</span><br><span class="line">    QString ex = <span class="keyword">this</span>-&gt;ui-&gt;btn_mul-&gt;text();</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode-&gt;setFlag(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_div_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;tmp.toInt();</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Num1="</span>&lt;&lt;num;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode-&gt;setNum1(num);</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp = <span class="string">""</span>;</span><br><span class="line">    QString ex = <span class="keyword">this</span>-&gt;ui-&gt;btn_div-&gt;text();</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode-&gt;setFlag(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_clear_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(<span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expr::on_btn_equal_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="keyword">this</span>-&gt;tmp.toInt();</span><br><span class="line">    qDebug()&lt;&lt;<span class="string">"Num2="</span>&lt;&lt;num;</span><br><span class="line">    <span class="keyword">this</span>-&gt;mode-&gt;setNum2(num);</span><br><span class="line">    QString res = <span class="keyword">this</span>-&gt;mode-&gt;doExpr();</span><br><span class="line">    qDebug()&lt;&lt;res;</span><br><span class="line">    <span class="keyword">this</span>-&gt;ui-&gt;lbl_display-&gt;setText(res);</span><br><span class="line">    <span class="keyword">this</span>-&gt;tmp = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"expr.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"QDialog"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    expr w;</span><br><span class="line">    w.show();</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建一个Model模型"><a href="#创建一个Model模型" class="headerlink" title="创建一个Model模型"></a>创建一个Model模型</h3><ul><li>model的声明</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MODEL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODEL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"QString"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">model</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> num1;</span><br><span class="line">    <span class="keyword">int</span> num2;</span><br><span class="line">    <span class="comment">//int result;</span></span><br><span class="line">    QString flag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    model();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNum1</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNum2</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(QString flag)</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">doExpr</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MODEL_H</span></span></span><br></pre></td></tr></table></figure><ul><li>model的定义</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"model.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"QString"</span></span></span><br><span class="line"></span><br><span class="line">model::model()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> model::setNum1(<span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;num1 = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> model::setNum2(<span class="keyword">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;num2 = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> model::setFlag(QString flag)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;flag = flag;</span><br><span class="line">&#125;</span><br><span class="line">QString model::doExpr()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;flag == <span class="string">"+"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="keyword">this</span>-&gt;num1 + <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;flag == <span class="string">"-"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="keyword">this</span>-&gt;num1 - <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;flag == <span class="string">"*"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        result = <span class="keyword">this</span>-&gt;num1 * <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;flag == <span class="string">"/"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;num2 == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"ERROR"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="keyword">this</span>-&gt;num1 / <span class="keyword">this</span>-&gt;num2;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QString::number(<span class="keyword">this</span>-&gt;num1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> QString::number(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待续</p>]]></content>
      
      
      <categories>
          
          <category> CPP方向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro</title>
      <link href="/2018/11/15/Manjaro%E5%AE%89%E8%A3%85/"/>
      <url>/2018/11/15/Manjaro%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>解决<a href="https://manjaro.org/" target="_blank" rel="noopener">Manjaro</a>安装后的基本配置问题.</p><a id="more"></a><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h3><ul><li>测试镜像源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><ul><li>修改/etc/pacman.conf文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><ul><li>增加archlinuxcn库和antergos库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = TrustAll</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br><span class="line">[antergos]</span><br><span class="line">SigLevel = TrustAll</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/antergos/$repo/$arch</span><br></pre></td></tr></table></figure><ul><li>或者选择Arch参考</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxfr]</span><br><span class="line">SigLevel = Never</span><br><span class="line">Server = http://repo.archlinux.fr/$arch</span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server =https://mirrors.ustc.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure><h3 id="导入GPG-key"><a href="#导入GPG-key" class="headerlink" title="导入GPG key"></a>导入GPG key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy </span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h3 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h3><blockquote><p>方案一</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 搜狗输入法</span><br><span class="line">sudo pacman -S fcitx-sogoupinyin</span><br><span class="line">sudo pacman -S fcitx-im</span><br><span class="line">sudo pacman -S fcitx-configtool # 图形化的配置工具</span><br><span class="line"># 需要添加配置文件`~/.xprofile`，添加如下：</span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br><span class="line"># 重新登录之后就可以使用中文输入法啦</span><br></pre></td></tr></table></figure><blockquote><p>方案二</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装中文输入法：</span><br><span class="line">pacman -S fcitx fcitx-libpinyin kcm-fcitx</span><br><span class="line">#修改.xprofile</span><br><span class="line">export GTK2_RC_FILES=&quot;$HOME/.gtkrc-2.0&quot;</span><br><span class="line">export LC_CTYPE=zh_CN.UTF-8</span><br><span class="line">export XMODIFIERS=@im=fcitx</span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br></pre></td></tr></table></figure><h3 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh-My-Zsh"></a>Oh-My-Zsh</h3><p><a href="https://www.jianshu.com/p/0894cd4643fc" target="_blank" rel="noopener">参考文档</a><br><a href="https://swp-song.com/2017/08/20/Tools/OhMyZsh%E5%AE%89%E8%A3%85%E5%92%8C%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">参考文档</a></p><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># zsh install</span><br><span class="line">$: sudo pacman -S zsh</span><br><span class="line"># oh-my-zsh install curl方式</span><br><span class="line">$: sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br><span class="line"># 或者wegt方式</span><br><span class="line">sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br><span class="line"># 更换默认的shell</span><br><span class="line">$: chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><ul><li>设置主题</li></ul><blockquote><p>终端输入命令 open ~/.zshrc<br>找到 ZSH_THEME=”robbyrussell” ，robbyrussell是默认的主题，修改 ZSH_THEME=”样式名称”<br>保存这个文件文件，重新打开终端。</p></blockquote><ul><li>查看主题名称</li></ul><blockquote><p>OhMyZsh自带一些主题，存放在~/.oh-my-zsh/themes目录<br>终端输入  ~/.oh-my-zsh/themes<br>查看 ls</p></blockquote><h3 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/chxuan/vimplus.git ~/.vimplus</span><br><span class="line"><span class="built_in">cd</span> ~/.vimplus</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/75cde8a80fd7" target="_blank" rel="noopener"><a href="https://www.jianshu.com/p/75cde8a80fd7" target="_blank" rel="noopener">https://www.jianshu.com/p/75cde8a80fd7</a></a></p><h3 id="引导修复"><a href="#引导修复" class="headerlink" title="引导修复"></a>引导修复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>网易云音乐</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure><h2 id="Manjaro-桌面调整"><a href="#Manjaro-桌面调整" class="headerlink" title="Manjaro 桌面调整"></a>Manjaro 桌面调整</h2><h3 id="安装深度桌面"><a href="#安装深度桌面" class="headerlink" title="安装深度桌面"></a>安装深度桌面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S deepin deepin-extra</span><br></pre></td></tr></table></figure><h3 id="修改-etc-lightdm-lightdm-conf"><a href="#修改-etc-lightdm-lightdm-conf" class="headerlink" title="修改/etc/lightdm/lightdm.conf"></a>修改/etc/lightdm/lightdm.conf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">greeter-session=lightdm-deepin-greeter</span><br></pre></td></tr></table></figure><h3 id="禁用sddm"><a href="#禁用sddm" class="headerlink" title="禁用sddm"></a>禁用sddm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> sddm</span><br></pre></td></tr></table></figure><h3 id="启用lightdm"><a href="#启用lightdm" class="headerlink" title="启用lightdm"></a>启用lightdm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> lightdm</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="卸载KDE配套工具-可选"><a href="#卸载KDE配套工具-可选" class="headerlink" title="卸载KDE配套工具(可选)"></a>卸载KDE配套工具(可选)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -Rsc plasma</span><br><span class="line">pacman -Rsc kde-applications</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统方向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LBMS 轻量级图书管理系统</title>
      <link href="/2018/11/10/LBMS%20%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/11/10/LBMS%20%E8%BD%BB%E9%87%8F%E7%BA%A7%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>该博文的目的是对C++类的概念的理解.</p><a id="more"></a><h3 id="设计CBook类"><a href="#设计CBook类" class="headerlink" title="设计CBook类"></a>设计CBook类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBook</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  CBook() &#123;&#125;</span><br><span class="line">  ~CBook() &#123;&#125;</span><br><span class="line">  CBook(<span class="keyword">char</span> *cName, <span class="keyword">char</span> *clsbn, <span class="keyword">char</span> *cPrice, <span class="keyword">char</span> *cAuthor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">WriteData</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">DeleteDate</span><span class="params">(<span class="keyword">int</span> iCount)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">GetBookFromFile</span><span class="params">(<span class="keyword">int</span> iCount)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">char</span> m_cName[NUM1];</span><br><span class="line">  <span class="keyword">char</span> m_clsbn[NUM1];</span><br><span class="line">  <span class="keyword">char</span> m_cPrice[NUM2];</span><br><span class="line">  <span class="keyword">char</span> m_cAuthor[NUM2];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>拷贝构造函数函数的实现</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CBook::CBook(<span class="keyword">char</span> *cName, <span class="keyword">char</span> *clsbn, <span class="keyword">char</span> *cPrice, <span class="keyword">char</span> *cAuthor) &#123;</span><br><span class="line">  <span class="built_in">strncpy</span>(m_cName, cName, NUM1);</span><br><span class="line">  <span class="built_in">strncpy</span>(m_clsbn, clsbn, NUM1);</span><br><span class="line">  <span class="built_in">strncpy</span>(m_cPrice, cPrice, NUM2);</span><br><span class="line">  <span class="built_in">strncpy</span>(m_cAuthor, cAuthor, NUM2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加模块"><a href="#添加模块" class="headerlink" title="添加模块"></a>添加模块</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CBook::WriteData() &#123;</span><br><span class="line">  ofstream ofile;</span><br><span class="line">  ofile.open(<span class="string">"book.dat"</span>, ios::binary | ios::app);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ofile.write(m_cName, NUM1);</span><br><span class="line">    ofile.write(m_clsbn, NUM1);</span><br><span class="line">    ofile.write(m_cPrice, NUM2);</span><br><span class="line">    ofile.write(m_cAuthor, NUM2);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (...) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"file error occurred "</span>;</span><br><span class="line">    ofile.close();</span><br><span class="line">  &#125;</span><br><span class="line">  ofile.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除模块"><a href="#删除模块" class="headerlink" title="删除模块"></a>删除模块</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CBook::DeleteDate(<span class="keyword">int</span> iCount) &#123;</span><br><span class="line">  <span class="keyword">long</span> respos;</span><br><span class="line">  <span class="keyword">int</span> iDataCount = <span class="number">0</span>; </span><br><span class="line">  fstream file;</span><br><span class="line">  fstream tmpfile;</span><br><span class="line">  ofstream ofile;</span><br><span class="line">  <span class="keyword">char</span> cTempBuf[NUM1 + NUM1 + NUM2 + NUM2];</span><br><span class="line">  file.open(<span class="string">"book.dat"</span>, ios::binary | ios::in | ios::out);</span><br><span class="line">  tmpfile.open(<span class="string">"temp.dat"</span>, ios::binary | ios::in | ios::out | ios::trunc);</span><br><span class="line">  file.seekg(<span class="number">0</span>, ios::end);</span><br><span class="line">  respos = file.tellg();</span><br><span class="line">  iDataCount = respos / (NUM1 + NUM1 + NUM2 + NUM2);</span><br><span class="line">  <span class="keyword">if</span> (iCount &lt; <span class="number">0</span> &amp;&amp; iCount &gt; iDataCount) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"Input number error"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    file.seekg((iCount) * (NUM1 + NUM1 + NUM2 + NUM2), ios::beg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (iDataCount - iCount); j++) &#123;</span><br><span class="line">      <span class="built_in">memset</span>(cTempBuf, <span class="number">0</span>, NUM1 + NUM1 + NUM2 + NUM2);</span><br><span class="line">      file.read(cTempBuf, NUM1 + NUM1 + NUM2 + NUM2);</span><br><span class="line">      tmpfile.write(cTempBuf, NUM1 + NUM1 + NUM2 + NUM2);</span><br><span class="line">    &#125;</span><br><span class="line">    file.close();</span><br><span class="line">    tmpfile.seekg(<span class="number">0</span>, ios::beg);</span><br><span class="line">    ofile.open(<span class="string">"book.dat"</span>);</span><br><span class="line">    ofile.seekp((iCount - <span class="number">1</span>) * (NUM1 + NUM1 + NUM2 + NUM2), ios::beg);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (iDataCount - iCount); i++) &#123;</span><br><span class="line">      <span class="built_in">memset</span>(cTempBuf, <span class="number">0</span>, NUM1 + NUM1 + NUM2 + NUM2);</span><br><span class="line">      tmpfile.read(cTempBuf, NUM1 + NUM1 + NUM2 + NUM2);</span><br><span class="line">      ofile.write(cTempBuf, NUM1 + NUM1 + NUM2 + NUM2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  tmpfile.close();</span><br><span class="line">  ofile.close();</span><br><span class="line">  remove(<span class="string">"temp.dat"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浏览模块"><a href="#浏览模块" class="headerlink" title="浏览模块"></a>浏览模块</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CBook::GetBookFromFile(<span class="keyword">int</span> iCount) &#123;</span><br><span class="line">  <span class="keyword">char</span> cName[NUM1];</span><br><span class="line">  <span class="keyword">char</span> clsbn[NUM1];</span><br><span class="line">  <span class="keyword">char</span> cPrice[NUM2];</span><br><span class="line">  <span class="keyword">char</span> cAuthor[NUM2];</span><br><span class="line">  ifstream ifile; <span class="comment">//这里创建了一个ifile输入流</span></span><br><span class="line">  ifile.open(<span class="string">"book.dat"</span>, ios::binary);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ifile.seekg(iCount * (NUM1 + NUM1 + NUM2 + NUM2), ios::beg);</span><br><span class="line">    ifile.read(cName, NUM1);</span><br><span class="line">    <span class="comment">// char * strncpy ( char * destination, const char * source, size_t num );</span></span><br><span class="line">    <span class="keyword">if</span> (ifile.tellg() &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">strncpy</span>(m_cName, cName, NUM1);</span><br><span class="line">    ifile.read(clsbn, NUM1);</span><br><span class="line">    <span class="keyword">if</span> (ifile.tellg() &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">strncpy</span>(m_clsbn, clsbn, NUM1);</span><br><span class="line">    ifile.read(cPrice, NUM2);</span><br><span class="line">    <span class="keyword">if</span> (ifile.tellg() &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">strncpy</span>(m_cPrice, cPrice, NUM2);</span><br><span class="line">    ifile.read(cAuthor, NUM2);</span><br><span class="line">    <span class="keyword">if</span> (ifile.tellg() &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">strncpy</span>(m_cAuthor, cAuthor, NUM2);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (...) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">"file error occurred"</span>;</span><br><span class="line">    ifile.close();</span><br><span class="line">  &#125;</span><br><span class="line">  ifile.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待续</p>]]></content>
      
      
      <categories>
          
          <category> CPP方向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo+GitHubPages+Netlify搭建自己的博客</title>
      <link href="/2018/10/28/%E5%9F%BA%E4%BA%8EHexo-GitHub-Netlify%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/10/28/%E5%9F%BA%E4%BA%8EHexo-GitHub-Netlify%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>该博文是对整个博客搭建过程的技术总结,重点是Hexo框架的使用.</p><a id="more"></a><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><blockquote><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo</a>是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h2 id="GitHubPages"><a href="#GitHubPages" class="headerlink" title="GitHubPages"></a>GitHubPages</h2><blockquote><p><a href="https://help.github.com/articles/what-is-github-pages/" target="_blank" rel="noopener">GitHubPages</a>是一种静态站点托管服务，旨在直接从GitHub存储库托管您的个人，组织或项目页面。</p></blockquote><h2 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a>Netlify</h2><blockquote><p><a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a>是国外一家提供静态网络托管服务的综合平台，专注于静态网站托管的web服务平台，可以完美的取代Coding。 Netlify完美且免费支持的ssl、域名绑定、http/2和TLS。最重要的就是，管理方式用git方法传递给github、gitlab或者是Bitbucket，然后Netlify就能自动编译并生成静态网站。<br><a href="https://www.freehao123.com/netlify/" target="_blank" rel="noopener">参考文档</a></p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S nodejs</span><br></pre></td></tr></table></figure><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S git</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="检查工作"><a href="#检查工作" class="headerlink" title="检查工作"></a>检查工作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nodejs：node -v</span><br><span class="line">git：git -version</span><br><span class="line">Hexo：Hexo -v</span><br><span class="line">如果提示相应版本号，代表安装成功。</span><br></pre></td></tr></table></figure><blockquote><p>若你遇到了问题，请<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">参考文档</a></p></blockquote><h2 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir myblog</span><br><span class="line">cd myblog</span><br></pre></td></tr></table></figure><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><p>项目初始化，会自动生成博客模板，以后写博客只需用 markdown 语法编写对应的 .md 文件即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="安装所有依赖"><a href="#安装所有依赖" class="headerlink" title="安装所有依赖"></a>安装所有依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>在浏览器输入localhost:4000即可预览博客</p><img src="/2018/10/28/基于Hexo-GitHub-Netlify搭建自己的博客/hexo_yulan.png" title="Hexo最初的样子"><h2 id="关联GitHub"><a href="#关联GitHub" class="headerlink" title="关联GitHub"></a>关联GitHub</h2><blockquote><p>通过 GitHub 的 pages 功能，我们可以把我们的博客托管到 GitHub，而无需去购买云服务器 ,即可构建免费博客。</p></blockquote><h3 id="创建GitHub账户"><a href="#创建GitHub账户" class="headerlink" title="创建GitHub账户"></a>创建GitHub账户</h3><blockquote><p>你可以去<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>官网按照步骤创建</p></blockquote><h3 id="配置关联GitHub"><a href="#配置关联GitHub" class="headerlink" title="配置关联GitHub"></a>配置关联GitHub</h3><blockquote><p>有了 GitHub 账号之后，登录 GitHub ，创建一个项目，项目名称最好和你本地的项目一致，比如： myblog</p></blockquote><ul><li>点击如图 Settings 开启，GitHub Pages 功能</li></ul><img src="/2018/10/28/基于Hexo-GitHub-Netlify搭建自己的博客/GitHub_Setting.png" title="GitHub_Setting"><ul><li>选择 master branch , 然后 Save</li></ul><img src="/2018/10/28/基于Hexo-GitHub-Netlify搭建自己的博客/GitHubPages.png" title="GitHubPages"><ul><li>复制你的项目连接，如图</li></ul><img src="/2018/10/28/基于Hexo-GitHub-Netlify搭建自己的博客/GitHub_lianjie.png" title="GitHub URL"><ul><li>然后在你本地项目根目录找到 _config.yml 文件，粘贴到以下位置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Deployment</span><br><span class="line">Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/persilee/MyBlog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="完成关联"><a href="#完成关联" class="headerlink" title="完成关联"></a>完成关联</h2><blockquote><p>完成以上步骤之后，就可以把自己本地项目推送到 GitHub 托管</p></blockquote><ul><li>安装 hexo-deployer-git 插件（可以通过简单的命令,完成文件生成及推送功能）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-deployer-git -S</span><br></pre></td></tr></table></figure><ul><li>运行 hexo g （生成本地文件）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><ul><li>运行 hexo d （将本地文件推送到 GitHub ，和 git push 功能相同）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><blockquote><p>此时，GitHub 应该已给你生成了访问连接，连接格式是: 你的账号名称 + .github.io + \项目名称,也可以去刚才 GitHubPages 设置页面查看</p></blockquote><h2 id="https-绑定域名"><a href="#https-绑定域名" class="headerlink" title="https 绑定域名"></a>https 绑定域名</h2><blockquote><p>这里采用第三方服务 Netlify 来提供免费的SSL/TLS证书。</p></blockquote><h3 id="新增站点"><a href="#新增站点" class="headerlink" title="新增站点"></a>新增站点</h3><ul><li>我们需要注册一个 <a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a> 账号,可以选择用 GitHub 注册</li></ul><img src="/2018/10/28/基于Hexo-GitHub-Netlify搭建自己的博客/Netlify1.png" title="Netlify Login"><ul><li><p>点击按钮 New site from Git,来新增站点</p></li><li><p>然后，点击如图按钮 GitHub</p></li></ul><img src="/2018/10/28/基于Hexo-GitHub-Netlify搭建自己的博客/Netlify2.png" title="Netlify"><ul><li><p>选择你的项目，比如我的 MyBlog</p></li><li><p>点击 Deploy site</p></li></ul><img src="/2018/10/28/基于Hexo-GitHub-Netlify搭建自己的博客/Netlify3.png" title="Deploy site"><ul><li>点击 Site settings</li><li>点击 Change site name 修改短名称，方便记忆</li><li>在点击 Domain management 下的 HTTPS ，按照步骤完成操作，稍等片刻，重新登陆博客，即可看到我们的域名已经上锁</li></ul><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>执行以下命令，安装 next 主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><p>更改配置文件,修改根目录下的 ./_config.yml 文件，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">找到 theme：设置为</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>重新生成文件，推送到GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>也可以运行以下命令，启动一个本地服务，调试确定无问题之后再 推送到 GitHub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
